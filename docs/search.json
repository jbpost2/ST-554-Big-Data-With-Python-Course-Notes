[
  {
    "objectID": "01_Programming_in_python/27-LASSO_Landing.html",
    "href": "01_Programming_in_python/27-LASSO_Landing.html",
    "title": "Common Uses for Data",
    "section": "",
    "text": "The video below discusses the common ways we use data. We discuss the general idea of statistical learning and using data for descriptive purposes, for predictive purposes, in order to make statistical inferences, and to find patterns in data.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/27-LASSO_Landing.html#notes",
    "href": "01_Programming_in_python/27-LASSO_Landing.html#notes",
    "title": "Common Uses for Data",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/25-Cross_Validation_Landing.html",
    "href": "01_Programming_in_python/25-Cross_Validation_Landing.html",
    "title": "Common Uses for Data",
    "section": "",
    "text": "The video below discusses the common ways we use data. We discuss the general idea of statistical learning and using data for descriptive purposes, for predictive purposes, in order to make statistical inferences, and to find patterns in data.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/25-Cross_Validation_Landing.html#notes",
    "href": "01_Programming_in_python/25-Cross_Validation_Landing.html#notes",
    "title": "Common Uses for Data",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/23-Fitting_Evaluating_SLR_Models_Landing.html",
    "href": "01_Programming_in_python/23-Fitting_Evaluating_SLR_Models_Landing.html",
    "title": "Common Uses for Data",
    "section": "",
    "text": "The video below discusses the common ways we use data. We discuss the general idea of statistical learning and using data for descriptive purposes, for predictive purposes, in order to make statistical inferences, and to find patterns in data.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/23-Fitting_Evaluating_SLR_Models_Landing.html#notes",
    "href": "01_Programming_in_python/23-Fitting_Evaluating_SLR_Models_Landing.html#notes",
    "title": "Common Uses for Data",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/21-Error_Handling.html#errors-when-programming",
    "href": "01_Programming_in_python/21-Error_Handling.html#errors-when-programming",
    "title": "Error Handling",
    "section": "Errors When Programming",
    "text": "Errors When Programming\nCommonly you’ll have syntax errors and exceptions\n\nSyntax error is when you typed something in wrong (and it can’t be parsed by python)\n\n\nfor x in range(0,10) #missing colon\n    print(x)\n\nSyntaxError: expected ':' (&lt;ipython-input-1-e585a31d91dc&gt;, line 1)\n\n\nSyntaxError: invalid syntax (&lt;string&gt;, line 1)\n\nThese aren’t things we can fix on the backend. Code needs to be typed in correctly!\nAn exception occurs when python can’t execute your code (during the execution something bad happens)\n\n\nprint(\"the number is \" + 10)\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\nTypeError: can only concatenate str (not \"int\") to str",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Error Handling"
    ]
  },
  {
    "objectID": "01_Programming_in_python/21-Error_Handling.html#dealing-with-exceptions",
    "href": "01_Programming_in_python/21-Error_Handling.html#dealing-with-exceptions",
    "title": "Error Handling",
    "section": "Dealing with Exceptions",
    "text": "Dealing with Exceptions\nExceptions can be dealt with to some degree! Consider this function to print out strings passed by the user.\n\ndef print_strings(*x): #should all be strings!\n    c = 0\n    for i in x:\n        print(\"The value in position \" + str(c) + \" is: \" + i)\n        c += 1\n\nprint_strings(\"cat\", \"dog\", \"bird\")\n\nThe value in position 0 is: cat\nThe value in position 1 is: dog\nThe value in position 2 is: bird\n\n\n\nIf we pass a non-string, this will throw an exception.\n\n\ndef print_strings(*x): #should all be strings!\n    c = 0\n    for i in x:\n        print(\"The value in position \" + str(c) + \" is: \" + i)\n        c += 1\n\nprint_strings(\"cat\", 1, \"bird\")\n\nThe value in position 0 is: cat\n\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\nNote that it says TypeError at the beginning of that big error message. What we can do is run a try block and set up what to do when we get certain exceptions via an except block.\nThe syntax for these is simlar to if and else blocks\n\n\ndef print_strings(*x):\n    c = 0\n    for i in x:\n        try: #try the code that is indented below here\n            print(\"The value in position \" + str(c) + \" is: \" + i)\n        except TypeError: #if we get a TypeError in the previous try block, do this and then continue execution!\n            print(\"Oh no! Not a string\")\n        c += 1\nprint_strings(\"cat\", \"dog\", 1, \"bird\")\n\nThe value in position 0 is: cat\nThe value in position 1 is: dog\nOh no! Not a string\nThe value in position 3 is: bird\n\n\n\nCan have multiple except statements and an else block to account for many situations\nLet’s create a quick function to printout information about a person given as key/value pairs\n\n\ndef print_stuff(**x): #now taking key value pairs (a dictionary within the function)\n    print(\"Pay special attention to \" + x.pop(\"Name\") + \"\\nHis attributes are:\") #we must have a Name argument\n    for key in x: #now run through the other info given and print it out\n        print(\"\\t\", key, \" : \", str(x[key])) #\\t is a tab\n\nprint_stuff(Name = \"Justin Post\", Age = 39, Job = \"Professor\")\n\nPay special attention to Justin Post\nHis attributes are:\n     Age  :  39\n     Job  :  Professor\n\n\nIf we don’t have a Name argument passed, we’d have an error!\n\nprint_stuff(person = \"Justin Post\", Age = 39, Job = \"Professor\")\n\nKeyError: 'Name'\n\n\nIn this case we get a KeyError (this is when we look for a certain key in a dictionary (or other similar object) and can’t find it) - We can look for this kind of error - Also look for other errors that might come up\n\ndef print_stuff(**x): #now taking key value pairs\n    try:\n        print(\"Pay special attention to \" + x.pop(\"Name\") + \"\\nHis attributes are:\")\n    except TypeError: #If x.pop(\"Name\") doesn't give a string we'll get a TypeError\n        print(\"Oh no! 'Name' is not a string\")\n    except KeyError: #If the user didn't give a \"Name\" argument we'll get a KeyError\n        print(\"You didn't supply a 'Name'!\")\n    for key in x: #Now print out the rest of the info about the person\n        print(\"\\t\", key, \" : \", str(x[key]))\nprint_stuff(Name = \"Justin Post\", Age = 39, Job = \"Professor\")\n\nPay special attention to Justin Post\nHis attributes are:\n     Age  :  39\n     Job  :  Professor\n\n\n\nprint_stuff(Name = 11, Age = 39, Job = \"Professor\")\n\nOh no! 'Name' is not a string\n     Age  :  39\n     Job  :  Professor\n\n\n\nprint_stuff(person = \"Justin Post\", Age = 39, Job = \"Professor\")\n\nYou didn't supply a 'Name'!\n     person  :  Justin Post\n     Age  :  39\n     Job  :  Professor\n\n\nAn else block can be given that is similar to what we use with if, elif logic - This specifies what to do if things aren’t accounted for above\n\ndef print_stuff(**x): #now taking key value pairs\n    try:\n        print(\"Pay special attention to \" + x.pop(\"Name\") + \"\\nHis attributes are:\")\n    except TypeError:\n        print(\"Oh no! 'Name' is not a string\")\n    except KeyError:\n        print(\"You didn't supply a 'Name'!\")\n    else: #if no errors occurred\n        print(\"(Valid name by the way - you rule)\")\n    for key in x:\n        print(\"\\t\", key, \" : \", str(x[key]))\n\nprint_stuff(Name = \"Justin Post\", Age = 39, Job = \"Professor\")\n\nPay special attention to Justin Post\nHis attributes are:\n(Valid name by the way - you rule)\n     Age  :  39\n     Job  :  Professor\n\n\n\nA finally clause can be given to always execute at end regardless\nLike an else block but it always runs\n\n\ndef print_stuff(**x): #now taking key value pairs\n    print(x)\n    try:\n        print(\"Pay special attention to \" + x.pop(\"Name\") + \"\\nHis attributes are:\")\n    except TypeError:\n        print(\"Oh no! 'Name' is not a string\")\n    except KeyError:\n        print(\"You didn't supply a 'Name'!\")\n    else:\n        print(\"(Valid name by the way)\")\n    finally:\n        print(\"This string prints no matter what\")\n    for key in x:\n        print(\"\\t\", key, \" : \", str(x[key]))\n\nprint_stuff(name = \"Justin Post\", Age = 39, Job = \"Professor\")\n\n{'name': 'Justin Post', 'Age': 39, 'Job': 'Professor'}\nYou didn't supply a 'Name'!\nThis string prints no matter what\n     name  :  Justin Post\n     Age  :  39\n     Job  :  Professor",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Error Handling"
    ]
  },
  {
    "objectID": "01_Programming_in_python/21-Error_Handling.html#raising-an-exception-yourself",
    "href": "01_Programming_in_python/21-Error_Handling.html#raising-an-exception-yourself",
    "title": "Error Handling",
    "section": "Raising an Exception Yourself",
    "text": "Raising an Exception Yourself\n\nYou can define your own exceptions to be more descriptive!\nIf we try to divide by 0 we get a ZeroDivisionError exception\n\n\n3/0\n\nZeroDivisionError: division by zero\n\n\n\nInstead we can raise our own exception\n\n\ndef my_divide(x, y):\n    if y == 0:\n        raise Exception(\"Can't divide by 0...\")\n    return x/y\n\n\nmy_divide(3, 9) #works\n\n0.3333333333333333\n\n\n\nmy_divide(3,0) #raises our custom exception and provides that note!\n\nException: Can't divide by 0...",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Error Handling"
    ]
  },
  {
    "objectID": "01_Programming_in_python/21-Error_Handling.html#quick-video",
    "href": "01_Programming_in_python/21-Error_Handling.html#quick-video",
    "title": "Error Handling",
    "section": "Quick Video",
    "text": "Quick Video\nThis video shows an example of using error control!\n\nfrom IPython.display import IFrame\nIFrame(src=\"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=cd799e52-f4f1-4531-8174-b10301708125&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Error Handling"
    ]
  },
  {
    "objectID": "01_Programming_in_python/19-Plotting_matplotlib.html#plotting-systems-in-python",
    "href": "01_Programming_in_python/19-Plotting_matplotlib.html#plotting-systems-in-python",
    "title": "Plotting with matplotlib",
    "section": "Plotting Systems in python",
    "text": "Plotting Systems in python\n\nmatplotlib: based on matlab plotting. Similar to base R plotting\nseaborn: an abstraction of matplotlib but still growing\nBokeh: for interactive visuals via HTML\nplotly: general plotting system that has a python module\nplotnine: a ggplot port",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Plotting with `matplotlib`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/19-Plotting_matplotlib.html#plotting-with-matplotlib-1",
    "href": "01_Programming_in_python/19-Plotting_matplotlib.html#plotting-with-matplotlib-1",
    "title": "Plotting with matplotlib",
    "section": "Plotting with matplotlib",
    "text": "Plotting with matplotlib\n\nTwo APIs (or ways to interact with matplotlib)\n\nExplicit axes interface (object oriented api)\nImplicit pyplot interface (what we’ll cover)\n\nWhen using the implicit API we use functions like\n\nplt.figure(), plt.plot(...), plt.scatter(), plt.bar(), or plt.hist()\n\nWe then determine axes and artist elements\n\nWe add labels, legends, and annotations\nFinally we produce the plot (and would then usually close the plot to denote that we are done working on it - not usually needed when programming in jupyter notebooks)\n\nplt.show() then plt.close()\n\n\n\nReading in Data to Plot\n\nConsider data on titanic passengers in titanic.csv\nThis is a really common dataset to play around with\nLet’s start with a focus on plotting categorical data\n\nWe start by importing matplotlib.pyplot as plt. This is a common refernece. The pyplot module has the functions we’ll use to do our plotting such as pyplot.hist() or pyplot.plot().\n\nimport matplotlib.pyplot as plt\n\nNow we’ll read in the titanic dataset using pandas. This dataset is available at: https://www4.stat.ncsu.edu/~online/datasets/titanic.csv\n\nimport pandas as pd\n#readin data\ntitanic_data = pd.read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/titanic.csv\")\n\nSome of the variables in the data have a lot of missing values. Let’s drop those. We also saw that converting some variables to category type variables was useful for having better labeling. Let’s do that as well.\n\n#remove some columns and a bad row\nsub_titanic_data = titanic_data.drop(columns = [\"body\", \"cabin\", \"boat\"], axis = 1) \\\n                               .iloc[:(titanic_data.shape[0]-1)]\n\n#create category versions of the variables\n#embarked variable\nsub_titanic_data[\"embarkedC\"] = sub_titanic_data.embarked.astype(\"category\")\nsub_titanic_data.embarkedC = sub_titanic_data.embarkedC.cat.rename_categories(\n                                    [\"Cherbourg\", \"Queenstown\", \"Southampton\"])\n#sex variable\nsub_titanic_data[\"sexC\"] = sub_titanic_data.sex.astype(\"category\")\nsub_titanic_data.sexC = sub_titanic_data.sexC.cat.rename_categories([\"Female\", \"Male\"])\n#survived variable\nsub_titanic_data[\"survivedC\"] = sub_titanic_data.survived.astype(\"category\")\nsub_titanic_data.survivedC = sub_titanic_data.survivedC.cat.rename_categories([\"Died\", \"Survived\"])\n\n\n\n\nBarplots\nCategorical variable - entries are a label or attribute\nOur goal is to describe the distribution of these variables. We do this by creating summary counts or frequncy counts\n\nBarplots give a visual of those counts!\n\nUse plt.bar()\n\nx represents the categories\nheight the corresponding heights\n\n\n\nWe have three categorical variables we’ll investigate. Let’s start with the embarkedC variable.\nWe know the x values (the category labels). We just need the heights to plot. We can find the heights by creating a one-way contingency table!\n\ntable = sub_titanic_data.embarkedC.value_counts()\ntable\n\nSouthampton    914\nCherbourg      270\nQueenstown     123\nName: embarkedC, dtype: int64\n\n\nNow we’ll use plt.bar() and map the categories (via calling the .categories attribute from our column of data) to x and the contingency table counts to height.\nThe x and height values just need to be paired up.\n\n#get the categories\nprint(sub_titanic_data.embarkedC.cat.categories)\n#note that the ordering does not line up with the counts\nprint(table)\n\nIndex(['Cherbourg', 'Queenstown', 'Southampton'], dtype='object')\nSouthampton    914\nCherbourg      270\nQueenstown     123\nName: embarkedC, dtype: int64\n\n\nAs the ordering isn’t the same, we’ll have to be careful to make sure things are paired up appropriately!\n\nindex = [1, 2, 0]\ntable[index]\n\nCherbourg      270\nQueenstown     123\nSouthampton    914\nName: embarkedC, dtype: int64\n\n\n\nplt.bar(x = sub_titanic_data.embarkedC.cat.categories,  height = table[index])\n#plt.show() would be needed if we weren't in a notebook\n\n\n\n\n\n\n\n\nNice! A good looking barplot. This is our first step. Next we want to make it look a bit nicer by adding labels, legends, and annotations.\nIn this case, we can add a better xlabel, ylabel, and title.\n\nplt.bar(x = sub_titanic_data.embarkedC.cat.categories,  height =  table[index])\n#as these are all being run in the same cell, these get added to the plot created\nplt.xlabel(\"Port Embarked\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Most Embarked in the Southampton Port\")\n\nText(0.5, 1.0, 'Most Embarked in the Southampton Port')\n\n\n\n\n\n\n\n\n\n\nA common way to resize the plot is to first call plt.subplots() and specify the figsize argument. We give this a tuple of the width and height we want.\n\n\nplt.subplots(figsize = (12, 5))\nplt.bar(x = sub_titanic_data.embarkedC.cat.categories,  height =  table[index])\nplt.xlabel(\"Port Embarked\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Most Embarked in the Southampton Port\")\n\nText(0.5, 1.0, 'Most Embarked in the Southampton Port')\n\n\n\n\n\n\n\n\n\n\n\nStacked Barplot with matplotlib\nIf we want to include a second categorical variable in our plot we can do so in a few ways. The first is to color the bars by the values of the other variable. In this way we can see how that variable distributes across the categories of our current variable!\n\nThe first step is to create the table of counts for our two variables\nWe’ll do this via the pd.crosstab() function\n\n\nstack_table = pd.crosstab(sub_titanic_data.embarkedC, sub_titanic_data.survivedC)\nstack_table\n\n\n  \n    \n\n\n\n\n\nsurvivedC\nDied\nSurvived\n\n\nembarkedC\n\n\n\n\n\n\nCherbourg\n120\n150\n\n\nQueenstown\n79\n44\n\n\nSouthampton\n610\n304\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\nTo manually build this bar plot with plt.bar() we can do the following: - Put our embarked variable labels on the x-axis - Create bars with heights corresponding to the counts for Died. - Create a second set of bars that sit directly on top of those bars with heights corresponding to the Survived counts - These bars should be different colors to denote the Died vs Survived counts!\nRemember that as we work on a plot within a cell, we continue to add to it unless we use plt.show(). This means we can use two calls to plt.bar() within the same cell and it will keep drawing on the same plot.\n\n#we want to get the heights for the Died bars\nstack_table.loc[:, \"Died\"]\n\nembarkedC\nCherbourg      120\nQueenstown      79\nSouthampton    610\nName: Died, dtype: int64\n\n\n\n#notice that these now line up with our category order so we don't need to change that\nsub_titanic_data.embarkedC.cat.categories\n\nIndex(['Cherbourg', 'Queenstown', 'Southampton'], dtype='object')\n\n\nOur first step is to plot these on a bar plot. We’ll add a label argument to plt.bar() which will make it easy to add a legend at the end.\n\nplt.bar(\n  x = sub_titanic_data.embarkedC.cat.categories,\n  height = stack_table.loc[:, \"Died\"],\n  label = \"Died\")\n\n\n\n\n\n\n\n\nNow we want to find the Survived counts and put those on top of these bars.\n\nstack_table.loc[:, \"Survived\"]\n\nembarkedC\nCherbourg      150\nQueenstown      44\nSouthampton    304\nName: Survived, dtype: int64\n\n\nWe can add a bottom = argument to our second plt.bar() call to specify where the bottom of the bars should start (the counts of the Died!)\n\nplt.bar(\n  x = sub_titanic_data.embarkedC.cat.categories,\n  height = stack_table.loc[:, \"Died\"],\n  label = \"Died\")\nplt.bar(\n  x = sub_titanic_data.embarkedC.cat.categories,\n  height = stack_table.loc[:, \"Survived\"],\n  bottom = stack_table.loc[:, \"Died\"],\n  label = \"Survived\"\n)\n\n\n\n\n\n\n\n\nNice! Colors are automatically created for us. Now we just need to add some nice labels to help us understand the plot.\nWe’ll use plt.legend() to produce a legend based off the labels used.\n\nplt.bar(\n  x = sub_titanic_data.embarkedC.cat.categories,\n  height = stack_table.loc[:, \"Died\"],\n  label = \"Died\")\nplt.bar(\n  x = sub_titanic_data.embarkedC.cat.categories,\n  height = stack_table.loc[:, \"Survived\"],\n  bottom = stack_table.loc[:, \"Died\"],\n  label = \"Survived\"\n  )\nplt.xlabel(\"Port Embarked\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Most Embarked in the Southampton Port \\n A higher proportion survived from Cherbourg\")\nplt.legend(loc = 0)\n\n\n\n\n\n\n\n\n\n\n\nSide-by-Side Barplot with matplotlib\nAlternative to the stacked bar plot is the side-by-side bar plot. This is the same idea but we put the bars for the categories next to each other instead of on top of eachother.\nThis is similar to our first bar plot but we need to have different x locations for each bar!\nLet’s take this bar plot of just the Died with port of embarkment.\nWe can change the x values from the categories to numbers.\n\nplt.bar(\n  x = [1, 2, 3],\n  height = stack_table.loc[:, \"Died\"],\n  label = \"Died\")\n\n\n\n\n\n\n\n\nNow we can specify the widths of the bars via the width argument. By default they are almost 1 here. Let’s make them smaller.\n\nplt.bar(\n  x = [1, 2, 3],\n  height = stack_table.loc[:, \"Died\"],\n  width = 0.4,\n  label = \"Died\")\n\n\n\n\n\n\n\n\nOk, now let’s just fix the x-axis labels! This can be done by using plt.xticks(). Here we specify the x values where we want our axis values to go along with corresponding labels.\n\nplt.bar(\n  x = [1, 2, 3],\n  height = stack_table.loc[:, \"Died\"],\n  width = 0.4,\n  label = \"Died\")\nplt.xticks([1, 2, 3], sub_titanic_data.embarkedC.cat.categories)\n\n([&lt;matplotlib.axis.XTick at 0x7f565d37ab90&gt;,\n  &lt;matplotlib.axis.XTick at 0x7f565d37ab60&gt;,\n  &lt;matplotlib.axis.XTick at 0x7f565d37aa70&gt;],\n [Text(1, 0, 'Cherbourg'),\n  Text(2, 0, 'Queenstown'),\n  Text(3, 0, 'Southampton')])\n\n\n\n\n\n\n\n\n\nSweet! Now we just add the bars for the Survived group next to these!\n\nplt.bar(\n  x = [1, 2, 3],\n  height = stack_table.loc[:, \"Died\"],\n  width = 0.4,\n  label = \"Died\")\nplt.bar(\n  x = [1.4, 2.4, 3.4],\n  height = stack_table.loc[:, \"Survived\"],\n  width = 0.4,\n  label = \"Survived\")\nplt.xticks([1.2, 2.2, 3.2], sub_titanic_data.embarkedC.cat.categories)\n\n([&lt;matplotlib.axis.XTick at 0x7f565d3e79a0&gt;,\n  &lt;matplotlib.axis.XTick at 0x7f565d3e7670&gt;,\n  &lt;matplotlib.axis.XTick at 0x7f565d394190&gt;],\n [Text(1.2, 0, 'Cherbourg'),\n  Text(2.2, 0, 'Queenstown'),\n  Text(3.2, 0, 'Southampton')])\n\n\n\n\n\n\n\n\n\nNow we’ll fancy it up with some labels and titles.\n\nplt.bar(\n  x = [1, 2, 3],\n  height = stack_table.loc[:, \"Died\"],\n  width = 0.4,\n  label = \"Died\")\nplt.bar(\n  x = [1.4, 2.4, 3.4],\n  height = stack_table.loc[:, \"Survived\"],\n  width = 0.4,\n  label = \"Survived\")\nplt.xticks([1.2, 2.2, 3.2], sub_titanic_data.embarkedC.cat.categories)\nplt.xlabel(\"Port Embarked\")\nplt.ylabel(\"Number of People\")\nplt.legend(loc = 0)\nplt.title(\"Most Embarked in the Southampton Port \\n A higher proportion survived from Cherbourg\")\n\nText(0.5, 1.0, 'Most Embarked in the Southampton Port \\n A higher proportion survived from Cherbourg')\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Numeric Variables\nWhoa - that was way too much work to create side-by-side bar plots… We could go through similar processes to create histograms, scatterplots, etc…\nFunctions like plt.scatter() aren’t bad to work with:\n\nplt.scatter(sub_titanic_data.age, sub_titanic_data.fare)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Fare\")\n\nText(0, 0.5, 'Fare')\n\n\n\n\n\n\n\n\n\nBut customizing the plots is a good bit of work. pandas has functionality to do plotting on data frames that will save us time!\nHowever, it is really useful to know the basics of matplotlib as many of the plotting systems are built on it!",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Plotting with `matplotlib`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/19-Plotting_matplotlib.html#quick-video",
    "href": "01_Programming_in_python/19-Plotting_matplotlib.html#quick-video",
    "title": "Plotting with matplotlib",
    "section": "Quick Video",
    "text": "Quick Video\nThis video shows an example of using matplotlib plotting!\n\nfrom IPython.display import IFrame\nIFrame(src=\"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=380014c4-f479-4ab1-b0d6-b1030168e8d1&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Plotting with `matplotlib`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/19-Plotting_matplotlib.html#recap",
    "href": "01_Programming_in_python/19-Plotting_matplotlib.html#recap",
    "title": "Plotting with matplotlib",
    "section": "Recap",
    "text": "Recap\n\nMust understand the type of data you have to visualize it\nGoal: Describe the distribution\nmatplotlib can create custom plots\n\nLots of work to specify everything yourself\n\nMany other plotting paradigms to consider!\n\npandas and seaborn next",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Plotting with `matplotlib`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/17-Numerical_Summaries.html#understand-how-data-is-stored",
    "href": "01_Programming_in_python/17-Numerical_Summaries.html#understand-how-data-is-stored",
    "title": "Numerical Summaries",
    "section": "Understand How Data is Stored",
    "text": "Understand How Data is Stored\nRead in some data\n\nimport pandas as pd\ntitanic_data = pd.read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/titanic.csv\")\n\n\nWe saw the .info() method to see how our variables are stored (among other things)\nColumn data types should make sense for what you expect!\n\n\ntitanic_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1310 entries, 0 to 1309\nData columns (total 14 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   pclass     1309 non-null   float64\n 1   survived   1309 non-null   float64\n 2   name       1309 non-null   object \n 3   sex        1309 non-null   object \n 4   age        1046 non-null   float64\n 5   sibsp      1309 non-null   float64\n 6   parch      1309 non-null   float64\n 7   ticket     1309 non-null   object \n 8   fare       1308 non-null   float64\n 9   cabin      295 non-null    object \n 10  embarked   1307 non-null   object \n 11  boat       486 non-null    object \n 12  body       121 non-null    float64\n 13  home.dest  745 non-null    object \ndtypes: float64(7), object(7)\nmemory usage: 143.4+ KB\n\n\n\n.head() and .tail() help to see what we have as well\n\n\ntitanic_data.head() #clearly some missing values with NaNs\n\n\n  \n    \n\n\n\n\n\n\npclass\nsurvived\nname\nsex\nage\nsibsp\nparch\nticket\nfare\ncabin\nembarked\nboat\nbody\nhome.dest\n\n\n\n\n0\n1.0\n1.0\nAllen, Miss. Elisabeth Walton\nfemale\n29.0000\n0.0\n0.0\n24160\n211.3375\nB5\nS\n2\nNaN\nSt Louis, MO\n\n\n1\n1.0\n1.0\nAllison, Master. Hudson Trevor\nmale\n0.9167\n1.0\n2.0\n113781\n151.5500\nC22 C26\nS\n11\nNaN\nMontreal, PQ / Chesterville, ON\n\n\n2\n1.0\n0.0\nAllison, Miss. Helen Loraine\nfemale\n2.0000\n1.0\n2.0\n113781\n151.5500\nC22 C26\nS\nNaN\nNaN\nMontreal, PQ / Chesterville, ON\n\n\n3\n1.0\n0.0\nAllison, Mr. Hudson Joshua Creighton\nmale\n30.0000\n1.0\n2.0\n113781\n151.5500\nC22 C26\nS\nNaN\n135.0\nMontreal, PQ / Chesterville, ON\n\n\n4\n1.0\n0.0\nAllison, Mrs. Hudson J C (Bessie Waldo Daniels)\nfemale\n25.0000\n1.0\n2.0\n113781\n151.5500\nC22 C26\nS\nNaN\nNaN\nMontreal, PQ / Chesterville, ON\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\ntitanic_data.tail() #note the last row of NaN (not a number)\n\n\n  \n    \n\n\n\n\n\n\npclass\nsurvived\nname\nsex\nage\nsibsp\nparch\nticket\nfare\ncabin\nembarked\nboat\nbody\nhome.dest\n\n\n\n\n1305\n3.0\n0.0\nZabour, Miss. Thamine\nfemale\nNaN\n1.0\n0.0\n2665\n14.4542\nNaN\nC\nNaN\nNaN\nNaN\n\n\n1306\n3.0\n0.0\nZakarian, Mr. Mapriededer\nmale\n26.5\n0.0\n0.0\n2656\n7.2250\nNaN\nC\nNaN\n304.0\nNaN\n\n\n1307\n3.0\n0.0\nZakarian, Mr. Ortin\nmale\n27.0\n0.0\n0.0\n2670\n7.2250\nNaN\nC\nNaN\nNaN\nNaN\n\n\n1308\n3.0\n0.0\nZimmerman, Mr. Leo\nmale\n29.0\n0.0\n0.0\n315082\n7.8750\nNaN\nS\nNaN\nNaN\nNaN\n\n\n1309\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Numerical Summaries"
    ]
  },
  {
    "objectID": "01_Programming_in_python/17-Numerical_Summaries.html#do-basic-data-validation",
    "href": "01_Programming_in_python/17-Numerical_Summaries.html#do-basic-data-validation",
    "title": "Numerical Summaries",
    "section": "Do Basic Data Validation",
    "text": "Do Basic Data Validation\n\nUse the describe() method on a data frame\nCheck that the min’s, max’s, etc. all make sense!\n\n\ntitanic_data.describe()\n\n\n  \n    \n\n\n\n\n\n\npclass\nsurvived\nage\nsibsp\nparch\nfare\nbody\n\n\n\n\ncount\n1309.000000\n1309.000000\n1046.000000\n1309.000000\n1309.000000\n1308.000000\n121.000000\n\n\nmean\n2.294882\n0.381971\n29.881135\n0.498854\n0.385027\n33.295479\n160.809917\n\n\nstd\n0.837836\n0.486055\n14.413500\n1.041658\n0.865560\n51.758668\n97.696922\n\n\nmin\n1.000000\n0.000000\n0.166700\n0.000000\n0.000000\n0.000000\n1.000000\n\n\n25%\n2.000000\n0.000000\n21.000000\n0.000000\n0.000000\n7.895800\n72.000000\n\n\n50%\n3.000000\n0.000000\n28.000000\n0.000000\n0.000000\n14.454200\n155.000000\n\n\n75%\n3.000000\n1.000000\n39.000000\n1.000000\n0.000000\n31.275000\n256.000000\n\n\nmax\n3.000000\n1.000000\n80.000000\n8.000000\n9.000000\n512.329200\n328.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nRecall we can subset our columns with []\nWe can determine percentiles to return with .describe() too\n\n\ntitanic_data.columns\n\nIndex(['pclass', 'survived', 'name', 'sex', 'age', 'sibsp', 'parch', 'ticket',\n       'fare', 'cabin', 'embarked', 'boat', 'body', 'home.dest'],\n      dtype='object')\n\n\n\ntitanic_data[[\"age\", \"sibsp\", \"parch\", \"fare\"]].describe(percentiles = [0.05, 0.25, 0.99])\n\n\n  \n    \n\n\n\n\n\n\nage\nsibsp\nparch\nfare\n\n\n\n\ncount\n1046.000000\n1309.000000\n1309.000000\n1308.000000\n\n\nmean\n29.881135\n0.498854\n0.385027\n33.295479\n\n\nstd\n14.413500\n1.041658\n0.865560\n51.758668\n\n\nmin\n0.166700\n0.000000\n0.000000\n0.000000\n\n\n5%\n5.000000\n0.000000\n0.000000\n7.225000\n\n\n25%\n21.000000\n0.000000\n0.000000\n7.895800\n\n\n50%\n28.000000\n0.000000\n0.000000\n14.454200\n\n\n99%\n65.000000\n5.000000\n4.000000\n262.375000\n\n\nmax\n80.000000\n8.000000\n9.000000\n512.329200",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Numerical Summaries"
    ]
  },
  {
    "objectID": "01_Programming_in_python/17-Numerical_Summaries.html#determine-rate-of-missing-values",
    "href": "01_Programming_in_python/17-Numerical_Summaries.html#determine-rate-of-missing-values",
    "title": "Numerical Summaries",
    "section": "Determine Rate of Missing Values",
    "text": "Determine Rate of Missing Values\n\nUse is.null() method\n\n\ntitanic_data.isnull()\n\n\n  \n    \n\n\n\n\n\n\npclass\nsurvived\nname\nsex\nage\nsibsp\nparch\nticket\nfare\ncabin\nembarked\nboat\nbody\nhome.dest\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n1\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n2\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\n\n\n3\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n4\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1305\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\n\n\n1306\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n1307\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\n\n\n1308\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\n\n\n1309\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n\n\n1310 rows × 14 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nYikes! Can’t make heads or tails of that.\nThis is a DataFrame of booleans!\nUse the .sum() method to see how many null values we have for each column\n\n\ntitanic_data.isnull().sum()\n\npclass          1\nsurvived        1\nname            1\nsex             1\nage           264\nsibsp           1\nparch           1\nticket          1\nfare            2\ncabin        1015\nembarked        3\nboat          824\nbody         1189\nhome.dest     565\ndtype: int64",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Numerical Summaries"
    ]
  },
  {
    "objectID": "01_Programming_in_python/17-Numerical_Summaries.html#clean-up-data-as-needed",
    "href": "01_Programming_in_python/17-Numerical_Summaries.html#clean-up-data-as-needed",
    "title": "Numerical Summaries",
    "section": "Clean Up Data As Needed",
    "text": "Clean Up Data As Needed\n\nCan remove rows with missing using .dropna() method\nFirst, remove the cabin, boat, and body variables since they have so many missing values\n\nCan use what we did earlier with [], .iloc[], or .loc[]\nIf we want to just remove some columns, can use the .drop() method\n\n\n\nsub_titanic_data = titanic_data.drop(columns = [\"body\", \"cabin\", \"boat\"])\nsub_titanic_data.shape\n\n(1310, 11)\n\n\n\nsub_titanic_data.isnull().sum()\n\npclass         1\nsurvived       1\nname           1\nsex            1\nage          264\nsibsp          1\nparch          1\nticket         1\nfare           2\nembarked       3\nhome.dest    565\ndtype: int64\n\n\n\nRemove any rows with missing values\n\n\ntemp = sub_titanic_data.dropna()\ntemp.shape\n\n(684, 11)\n\n\n\ntemp.isnull().sum()\n\npclass       0\nsurvived     0\nname         0\nsex          0\nage          0\nsibsp        0\nparch        0\nticket       0\nfare         0\nembarked     0\nhome.dest    0\ndtype: int64\n\n\n\nCan be dangerous to impute the missing values… but can be done with .fillna() method\n\n\nsub_titanic_data.fillna(value = 0) #note, for instance, some values of age are 0 now and the last row is all 0 values\n\n\n  \n    \n\n\n\n\n\n\npclass\nsurvived\nname\nsex\nage\nsibsp\nparch\nticket\nfare\nembarked\nhome.dest\n\n\n\n\n0\n1.0\n1.0\nAllen, Miss. Elisabeth Walton\nfemale\n29.0000\n0.0\n0.0\n24160\n211.3375\nS\nSt Louis, MO\n\n\n1\n1.0\n1.0\nAllison, Master. Hudson Trevor\nmale\n0.9167\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n2\n1.0\n0.0\nAllison, Miss. Helen Loraine\nfemale\n2.0000\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n3\n1.0\n0.0\nAllison, Mr. Hudson Joshua Creighton\nmale\n30.0000\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n4\n1.0\n0.0\nAllison, Mrs. Hudson J C (Bessie Waldo Daniels)\nfemale\n25.0000\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1305\n3.0\n0.0\nZabour, Miss. Thamine\nfemale\n0.0000\n1.0\n0.0\n2665\n14.4542\nC\n0\n\n\n1306\n3.0\n0.0\nZakarian, Mr. Mapriededer\nmale\n26.5000\n0.0\n0.0\n2656\n7.2250\nC\n0\n\n\n1307\n3.0\n0.0\nZakarian, Mr. Ortin\nmale\n27.0000\n0.0\n0.0\n2670\n7.2250\nC\n0\n\n\n1308\n3.0\n0.0\nZimmerman, Mr. Leo\nmale\n29.0000\n0.0\n0.0\n315082\n7.8750\nS\n0\n\n\n1309\n0.0\n0.0\n0\n0\n0.0000\n0.0\n0.0\n0\n0.0000\n0\n0\n\n\n\n\n1310 rows × 11 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nCan set the value you want to impute by passing a dictionary of key/value pairs\n\n\nsub_titanic_data.fillna(value = {\"home.dest\": \"Unknown\", \"age\": 200})\n\n\n  \n    \n\n\n\n\n\n\npclass\nsurvived\nname\nsex\nage\nsibsp\nparch\nticket\nfare\nembarked\nhome.dest\n\n\n\n\n0\n1.0\n1.0\nAllen, Miss. Elisabeth Walton\nfemale\n29.0000\n0.0\n0.0\n24160\n211.3375\nS\nSt Louis, MO\n\n\n1\n1.0\n1.0\nAllison, Master. Hudson Trevor\nmale\n0.9167\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n2\n1.0\n0.0\nAllison, Miss. Helen Loraine\nfemale\n2.0000\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n3\n1.0\n0.0\nAllison, Mr. Hudson Joshua Creighton\nmale\n30.0000\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n4\n1.0\n0.0\nAllison, Mrs. Hudson J C (Bessie Waldo Daniels)\nfemale\n25.0000\n1.0\n2.0\n113781\n151.5500\nS\nMontreal, PQ / Chesterville, ON\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1305\n3.0\n0.0\nZabour, Miss. Thamine\nfemale\n200.0000\n1.0\n0.0\n2665\n14.4542\nC\nUnknown\n\n\n1306\n3.0\n0.0\nZakarian, Mr. Mapriededer\nmale\n26.5000\n0.0\n0.0\n2656\n7.2250\nC\nUnknown\n\n\n1307\n3.0\n0.0\nZakarian, Mr. Ortin\nmale\n27.0000\n0.0\n0.0\n2670\n7.2250\nC\nUnknown\n\n\n1308\n3.0\n0.0\nZimmerman, Mr. Leo\nmale\n29.0000\n0.0\n0.0\n315082\n7.8750\nS\nUnknown\n\n\n1309\nNaN\nNaN\nNaN\nNaN\n200.0000\nNaN\nNaN\nNaN\nNaN\nNaN\nUnknown\n\n\n\n\n1310 rows × 11 columns",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Numerical Summaries"
    ]
  },
  {
    "objectID": "01_Programming_in_python/17-Numerical_Summaries.html#investigate-distributions",
    "href": "01_Programming_in_python/17-Numerical_Summaries.html#investigate-distributions",
    "title": "Numerical Summaries",
    "section": "Investigate distributions",
    "text": "Investigate distributions\n\nHow to summarize data depends on the type of data\n\nCategorical (Qualitative) variable - entries are a label or attribute\n\nNumeric (Quantitative) variable - entries are a numerical value where math can be performed\n\nNumerical summaries (across subgroups)\n\nContingency Tables (for categorical data)\nMean/Median\n\nStandard Deviation/Variance/IQR\nQuantiles/Percentiles\n\nGraphical summaries (across subgroups)\n\nBar plots (for categorical data)\nHistograms\n\nBox plots\n\nScatter plots\n\n\n\n\nCategorical Data\nGoal: Describe the distribution of the variable\n\nDistribution = pattern and frequency with which you observe a variable\n\nCategorical variable - entries are a label or attribute\n\nDescribe the relative frequency (or count) for each category\nUsing pandas .value_counts() method and crosstab() function\n\n\nVariables of interest for this section: + embarked (where journey started)\n\nsub_titanic_data.embarked[0:2]\n\n0    S\n1    S\nName: embarked, dtype: object\n\n\n\ntype(sub_titanic_data.embarked[0])\n\nstr\n\n\n\nCategory Type Variables\nA category type variable is really useful for categorical variables.\n\nAkin to a factor variable in R (if you know those)\nCan have more descriptive labels, ordering of categories, etc.\n\nLet’s give the embarked variable more descriptive values and by converting it to a category type and manipulating it that way.\n\nsub_titanic_data[\"embarkedC\"] = sub_titanic_data.embarked.astype(\"category\")\nsub_titanic_data.embarkedC[0:2]\n\n0    S\n1    S\nName: embarkedC, dtype: category\nCategories (3, object): ['C', 'Q', 'S']\n\n\n\nNow we can use the .cat.rename_categories() method on this category variable\n\n\nsub_titanic_data.embarkedC = sub_titanic_data.embarkedC.cat.rename_categories([\"Cherbourg\", \"Queenstown\", \"Southampton\"])\nsub_titanic_data.embarkedC[0:2]\n\n0    Southampton\n1    Southampton\nName: embarkedC, dtype: category\nCategories (3, object): ['Cherbourg', 'Queenstown', 'Southampton']\n\n\nLet’s grab two more categorical variables and do similar things:\n\nsex (Male or Female)\n\nsurvived (survive or not)\n\n\n#convert sec variable\nsub_titanic_data[\"sexC\"] = sub_titanic_data.sex.astype(\"category\")\nsub_titanic_data.sexC = sub_titanic_data.sexC.cat.rename_categories([\"Female\", \"Male\"])\n#convert survived variable\nsub_titanic_data[\"survivedC\"] = sub_titanic_data.survived.astype(\"category\")\nsub_titanic_data.survivedC = sub_titanic_data.survivedC.cat.rename_categories([\"Died\", \"Survived\"])\n\n\n\n\nContingency tables\n\nTables of counts are the main numerical summary for categorical data\nCreate one-way contingency tables (.value_counts() method) (one-way because we are looking at one variable at a time)\n\n\nsub_titanic_data.embarkedC.value_counts(dropna = False)\n\nSouthampton    914\nCherbourg      270\nQueenstown     123\nNaN              3\nName: embarkedC, dtype: int64\n\n\n\nsub_titanic_data.survivedC.value_counts()\n\nDied        809\nSurvived    500\nName: survivedC, dtype: int64\n\n\n\nsub_titanic_data.sexC.value_counts()\n\nMale      843\nFemale    466\nName: sexC, dtype: int64\n\n\n\nAlternatively, we can find a one-way table using the pd.cross_tab() function\n\nThis function is meant to take two columns (or more) and return tabulations between those two variables\nWe can define a dummy variable to cross with\nindex argument is the row variable and columns argument is the column variable\n\n\n\nsub_titanic_data[\"dummy\"] = 0\npd.crosstab(index = sub_titanic_data.embarkedC, columns = sub_titanic_data.dummy)\n\n\n  \n    \n\n\n\n\n\ndummy\n0\n\n\nembarkedC\n\n\n\n\n\nCherbourg\n270\n\n\nQueenstown\n123\n\n\nSouthampton\n914\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\npd.crosstab(index = sub_titanic_data.sexC, columns = sub_titanic_data.dummy)\n\n\n  \n    \n\n\n\n\n\ndummy\n0\n\n\nsexC\n\n\n\n\n\nFemale\n466\n\n\nMale\n843\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nTo summarize two categorical variables together, we use a two-way contingency table\nUse the cross_tab() function here\n\n\npd.crosstab(\n  sub_titanic_data.embarkedC, #index variable\n  sub_titanic_data.survivedC) #column variable\n\n\n  \n    \n\n\n\n\n\nsurvivedC\nDied\nSurvived\n\n\nembarkedC\n\n\n\n\n\n\nCherbourg\n120\n150\n\n\nQueenstown\n79\n44\n\n\nSouthampton\n610\n304\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\npd.crosstab(\n  sub_titanic_data.sexC,\n  sub_titanic_data.survivedC)\n\n\n  \n    \n\n\n\n\n\nsurvivedC\nDied\nSurvived\n\n\nsexC\n\n\n\n\n\n\nFemale\n127\n339\n\n\nMale\n682\n161\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nAdd marginal totals with margins = True argument\n\n\npd.crosstab(\n  sub_titanic_data.embarkedC,\n  sub_titanic_data.survivedC,\n  margins = True)\n\n\n  \n    \n\n\n\n\n\nsurvivedC\nDied\nSurvived\nAll\n\n\nembarkedC\n\n\n\n\n\n\n\nCherbourg\n120\n150\n270\n\n\nQueenstown\n79\n44\n123\n\n\nSouthampton\n610\n304\n914\n\n\nAll\n809\n498\n1307\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nAdd row and columns names for clarity\n\nUse rownames and colnames arguments\n\n\n\npd.crosstab(\n  sub_titanic_data.embarkedC,\n  sub_titanic_data.survivedC,\n  margins = True,\n  rownames = [\"Embarked Port\"],\n  colnames = [\"Survival Status\"]\n  )\n\n\n  \n    \n\n\n\n\n\nSurvival Status\nDied\nSurvived\nAll\n\n\nEmbarked Port\n\n\n\n\n\n\n\nCherbourg\n120\n150\n270\n\n\nQueenstown\n79\n44\n123\n\n\nSouthampton\n610\n304\n914\n\n\nAll\n809\n498\n1307\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\nFor more than two variables we can create tables but they get harder to read.\n\nThree-way contingency table:\n\n\npd.crosstab(\n  [sub_titanic_data.embarkedC, sub_titanic_data.survivedC],\n  sub_titanic_data.sexC,\n  margins = True)\n\n\n  \n    \n\n\n\n\n\n\nsexC\nFemale\nMale\nAll\n\n\nembarkedC\nsurvivedC\n\n\n\n\n\n\n\nCherbourg\nDied\n11\n109\n120\n\n\nSurvived\n102\n48\n150\n\n\nQueenstown\nDied\n23\n56\n79\n\n\nSurvived\n37\n7\n44\n\n\nSouthampton\nDied\n93\n517\n610\n\n\nSurvived\n198\n106\n304\n\n\nAll\n\n464\n843\n1307\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nAdd in names for more clarity\n\n\nmy_tab = pd.crosstab(\n  [sub_titanic_data.embarkedC, sub_titanic_data.survivedC],\n  sub_titanic_data.sexC,\n  margins = True,\n  rownames = ['Embarked Port', 'Survival Status'],\n  colnames = ['Sex'])\nmy_tab\n\n\n  \n    \n\n\n\n\n\n\nSex\nFemale\nMale\nAll\n\n\nEmbarked Port\nSurvival Status\n\n\n\n\n\n\n\nCherbourg\nDied\n11\n109\n120\n\n\nSurvived\n102\n48\n150\n\n\nQueenstown\nDied\n23\n56\n79\n\n\nSurvived\n37\n7\n44\n\n\nSouthampton\nDied\n93\n517\n610\n\n\nSurvived\n198\n106\n304\n\n\nAll\n\n464\n843\n1307\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\nWe might want to subset this to return certain values…\n\ncrosstab() returns a data frame!\n\n\ntype(my_tab)\n\npandas.core.frame.DataFrame\n\n\n\nmy_tab.columns\n\nIndex(['Female', 'Male', 'All'], dtype='object', name='Sex')\n\n\n\nmy_tab.index\n\nMultiIndex([(  'Cherbourg',     'Died'),\n            (  'Cherbourg', 'Survived'),\n            ( 'Queenstown',     'Died'),\n            ( 'Queenstown', 'Survived'),\n            ('Southampton',     'Died'),\n            ('Southampton', 'Survived'),\n            (        'All',         '')],\n           names=['Embarked Port', 'Survival Status'])\n\n\n\nCan obtain conditional bivariate info via subsetting!\nThe MultiIndex can be tough but let’s look at some examples\nBelow returns the embarked vs survived table for females\n\n\nmy_tab[\"Female\"]\n\nEmbarked Port  Survival Status\nCherbourg      Died                11\n               Survived           102\nQueenstown     Died                23\n               Survived            37\nSouthampton    Died                93\n               Survived           198\nAll                               464\nName: Female, dtype: int64\n\n\n\nmy_tab.loc[:, \"Female\"] #.loc way of doing this, : gives all of that index\n\nEmbarked Port  Survival Status\nCherbourg      Died                11\n               Survived           102\nQueenstown     Died                23\n               Survived            37\nSouthampton    Died                93\n               Survived           198\nAll                               464\nName: Female, dtype: int64\n\n\n\nBelow returns the sex vs embarked table for those that died\n\n\nmy_tab.iloc[0:5:2, :] #0:5:2 gives a shorthand for a sequence with steps of 2s\n\n\n  \n    \n\n\n\n\n\n\nSex\nFemale\nMale\nAll\n\n\nEmbarked Port\nSurvival Status\n\n\n\n\n\n\n\nCherbourg\nDied\n11\n109\n120\n\n\nQueenstown\nDied\n23\n56\n79\n\n\nSouthampton\nDied\n93\n517\n610\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nUsing .loc[] is better\nMust understand our MultiIndex\n\n\nmy_tab.index\n\nMultiIndex([(  'Cherbourg',     'Died'),\n            (  'Cherbourg', 'Survived'),\n            ( 'Queenstown',     'Died'),\n            ( 'Queenstown', 'Survived'),\n            ('Southampton',     'Died'),\n            ('Southampton', 'Survived'),\n            (        'All',         '')],\n           names=['Embarked Port', 'Survival Status'])\n\n\n\nBelow uses this index to return the sex vs embarked table for those that died\n\n\nmy_tab.loc[((\"Cherbourg\", \"Queenstown\", \"Southampton\"), \"Died\"), :]\n\n\n  \n    \n\n\n\n\n\n\nSex\nFemale\nMale\nAll\n\n\nEmbarked Port\nSurvival Status\n\n\n\n\n\n\n\nCherbourg\nDied\n11\n109\n120\n\n\nQueenstown\nDied\n23\n56\n79\n\n\nSouthampton\nDied\n93\n517\n610\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nBelow returns the sex vs survived table for embarked of Cherbourg\n\n\nmy_tab.loc[('Cherbourg', (\"Died\", \"Survived\")), :]\n\n\n  \n    \n\n\n\n\n\n\nSex\nFemale\nMale\nAll\n\n\nEmbarked Port\nSurvival Status\n\n\n\n\n\n\n\nCherbourg\nDied\n11\n109\n120\n\n\nSurvived\n102\n48\n150\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nReturn the sex table for those that died and embarked at Cherbourg\n\nFirst with .iloc[] then with .loc[]\n\n\n\nmy_tab.iloc[0, :]\n\nSex\nFemale     11\nMale      109\nAll       120\nName: (Cherbourg, Died), dtype: int64\n\n\n\nmy_tab.loc[('Cherbourg', 'Died')]\n\nSex\nFemale     11\nMale      109\nAll       120\nName: (Cherbourg, Died), dtype: int64\n\n\n\n\n\n\nNumeric Data\nGoal: Describe the distribution of the variable\n\nDistribution = pattern and frequency with which you observe a variable\n\nNumeric variable - entries are a numerical value where math can be performed\n\nFor a single numeric variable, describe the distribution via\n\nShape: Histogram, Density plot, … (covered later)\nMeasures of center: Mean, Median, …\nMeasures of spread: Variance, Standard Deviation, Quartiles, IQR, …\n\nFor two numeric variables, describe the distribution via\n\nShape: Scatter plot, …\nMeasures of linear relationship: Covariance, Correlation, …\n\n\n\nMeasures of Center\n\nFind mean and median with methods on a Series\n\n\ntype(sub_titanic_data['fare'])\n\npandas.core.series.Series\n\n\n\nsub_titanic_data['fare'].mean()\n\n33.29547928134557\n\n\n\nsub_titanic_data['fare'].median()\n\n14.4542\n\n\n\nsub_titanic_data.age.mean() #same thing with a different way to get a column\n\n29.8811345124283\n\n\n\nsub_titanic_data.age.median()\n\n28.0\n\n\n\n\n\nMeasures of Spread\n\nStandard Deviation, Quartiles, & IQR found with Series methods as well\n\n\nsub_titanic_data.age.std()\n\n14.413499699923602\n\n\n\nsub_titanic_data.age.quantile(q = [0.2, 0.25, 0.5, 0.95])\n\n0.20    19.0\n0.25    21.0\n0.50    28.0\n0.95    57.0\nName: age, dtype: float64\n\n\n\nq1 = sub_titanic_data.age.quantile(q = [0.25])\nq1\n\n0.25    21.0\nName: age, dtype: float64\n\n\n\nq3 = sub_titanic_data.age.quantile(q = [0.75])\nq3\n\n0.75    39.0\nName: age, dtype: float64\n\n\n\ntype(q1)\n\npandas.core.series.Series\n\n\n\nAs both q1 and q3 are Series, they have indices\nThis makes them a little more difficult than you might like to subtract (to find the IRQ)\n\n\nq3-q1 #doesn't work due to the differing index names\n\n0.25   NaN\n0.75   NaN\nName: age, dtype: float64\n\n\n\nq3[0.75] - q1[0.25] #grab the values by index names and subtract those\n\n18.0\n\n\n\nAlternatively, remember that returning the .values attribute returns a numpy array. We can subtract these.\n\n\nq3.values - q1.values\n\narray([18.])\n\n\n\n\n\nMeasures of Linear Relationship\n\nCorrelation via the .corr() method on a data frame\nThis gives the correlation with all numerically (stored) variables\n\nJust because it is stored numerically doesn’t mean we should treat it numerically!\n\n\n\nsub_titanic_data.corr()\n\nFutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  sub_titanic_data.corr()\n\n\n\n  \n    \n\n\n\n\n\n\npclass\nsurvived\nage\nsibsp\nparch\nfare\ndummy\n\n\n\n\npclass\n1.000000\n-0.312469\n-0.408106\n0.060832\n0.018322\n-0.558629\nNaN\n\n\nsurvived\n-0.312469\n1.000000\n-0.055513\n-0.027825\n0.082660\n0.244265\nNaN\n\n\nage\n-0.408106\n-0.055513\n1.000000\n-0.243699\n-0.150917\n0.178739\nNaN\n\n\nsibsp\n0.060832\n-0.027825\n-0.243699\n1.000000\n0.373587\n0.160238\nNaN\n\n\nparch\n0.018322\n0.082660\n-0.150917\n0.373587\n1.000000\n0.221539\nNaN\n\n\nfare\n-0.558629\n0.244265\n0.178739\n0.160238\n0.221539\n1.000000\nNaN\n\n\ndummy\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nLet’s just look at the variables that make sense\n\n\nsub_titanic_data[[\"age\", \"fare\", \"sibsp\", \"parch\"]].corr()\n\n\n  \n    \n\n\n\n\n\n\nage\nfare\nsibsp\nparch\n\n\n\n\nage\n1.000000\n0.178739\n-0.243699\n-0.150917\n\n\nfare\n0.178739\n1.000000\n0.160238\n0.221539\n\n\nsibsp\n-0.243699\n0.160238\n1.000000\n0.373587\n\n\nparch\n-0.150917\n0.221539\n0.373587\n1.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n\n\n\nSummaries Across Groups\nUsually want summaries for different subgroups of data\nTwo approaches we’ll cover: - Use .groupby() method and then use a summarization method - Use pd.crosstab() function with aggfunc argument\n\n.groupby() Examples\nExample: Get similar fare summaries for each survival status\n\nsub_titanic_data.groupby(\"survivedC\")[[\"age\", \"fare\", \"sibsp\", \"parch\"]].mean()\n\n\n  \n    \n\n\n\n\n\n\nage\nfare\nsibsp\nparch\n\n\nsurvivedC\n\n\n\n\n\n\n\n\nDied\n30.545369\n23.353831\n0.521632\n0.328801\n\n\nSurvived\n28.918228\n49.361184\n0.462000\n0.476000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nsub_titanic_data.groupby(\"survivedC\")[[\"age\", \"fare\", \"sibsp\", \"parch\"]].std()\n\n\n  \n    \n\n\n\n\n\n\nage\nfare\nsibsp\nparch\n\n\nsurvivedC\n\n\n\n\n\n\n\n\nDied\n13.922539\n34.145096\n1.210449\n0.912332\n\n\nSurvived\n15.061481\n68.648795\n0.685197\n0.776292\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n.unstack() method on the result can sometimes make the output clearer\n\n\nsub_titanic_data.groupby(\"survivedC\")[[\"age\", \"fare\", \"sibsp\", \"parch\"]].mean().unstack()\n\n       survivedC\nage    Died         30.545369\n       Survived     28.918228\nfare   Died         23.353831\n       Survived     49.361184\nsibsp  Died          0.521632\n       Survived      0.462000\nparch  Died          0.328801\n       Survived      0.476000\ndtype: float64\n\n\n\nMultiple grouping variables can be given as a list\n\nExample: Get summary for numeric type variables for each survival status and embarked port\n\nsub_titanic_data.groupby([\"survivedC\", \"embarkedC\"])[[\"age\", \"fare\", \"sibsp\", \"parch\"]].mean()\n\n\n  \n    \n\n\n\n\n\n\n\nage\nfare\nsibsp\nparch\n\n\nsurvivedC\nembarkedC\n\n\n\n\n\n\n\n\nDied\nCherbourg\n34.468750\n40.255592\n0.316667\n0.225000\n\n\nQueenstown\n30.202703\n11.615349\n0.379747\n0.177215\n\n\nSouthampton\n29.945385\n21.546160\n0.580328\n0.368852\n\n\nSurvived\nCherbourg\n31.037248\n80.000807\n0.466667\n0.486667\n\n\nQueenstown\n24.153846\n13.833998\n0.272727\n0.000000\n\n\nSouthampton\n27.989881\n39.183470\n0.490132\n0.542763\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nsub_titanic_data.groupby([\"survivedC\", \"embarkedC\"])[[\"age\", \"fare\", \"sibsp\", \"parch\"]].std()\n\n\n  \n    \n\n\n\n\n\n\n\nage\nfare\nsibsp\nparch\n\n\nsurvivedC\nembarkedC\n\n\n\n\n\n\n\n\nDied\nCherbourg\n14.655181\n56.553704\n0.518293\n0.557040\n\n\nQueenstown\n16.785187\n10.922240\n1.016578\n0.655538\n\n\nSouthampton\n13.496871\n28.786020\n1.320897\n0.990934\n\n\nSurvived\nCherbourg\n15.523752\n97.642219\n0.575410\n0.730327\n\n\nQueenstown\n7.057457\n17.503850\n0.585230\n0.000000\n\n\nSouthampton\n14.926867\n47.656409\n0.744552\n0.831405\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nAs our code gets longer, this is a good place to use \\ to extend our code down a line\n\n\nsub_titanic_data \\\n  .groupby([\"survivedC\", \"embarkedC\"]) \\\n   [[\"age\", \"fare\", \"sibsp\", \"parch\"]] \\\n   .mean()\n\n\n  \n    \n\n\n\n\n\n\n\nage\nfare\nsibsp\nparch\n\n\nsurvivedC\nembarkedC\n\n\n\n\n\n\n\n\nDied\nCherbourg\n34.468750\n40.255592\n0.316667\n0.225000\n\n\nQueenstown\n30.202703\n11.615349\n0.379747\n0.177215\n\n\nSouthampton\n29.945385\n21.546160\n0.580328\n0.368852\n\n\nSurvived\nCherbourg\n31.037248\n80.000807\n0.466667\n0.486667\n\n\nQueenstown\n24.153846\n13.833998\n0.272727\n0.000000\n\n\nSouthampton\n27.989881\n39.183470\n0.490132\n0.542763\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n\npd.crosstab() Examples\n\nAlternatively we can use the pd.crosstab() function with an aggfunc to define our summarization to produce\n\nExample: Get summary for numeric type variables for each survival status\n\nA bit awkward in this case as we don’t really have a ‘column’ variable\nMake a dummy variable for that\n\n\npd.crosstab(\n  sub_titanic_data.survivedC,\n  columns = [\"mean\" for _ in range(sub_titanic_data.shape[0])],\n  values = sub_titanic_data.fare,\n  aggfunc = 'mean')\n\n\n  \n    \n\n\n\n\n\ncol_0\nmean\n\n\nsurvivedC\n\n\n\n\n\nDied\n23.353831\n\n\nSurvived\n49.361184\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nCan return multiple summaries at once by passing them as a list\n\n\npd.crosstab(\n  sub_titanic_data.survivedC,\n  columns = [\"stat\" for _ in range(sub_titanic_data.shape[0])],\n  values = sub_titanic_data.fare,\n  aggfunc = ['mean', 'median', 'std', 'count'])\n\n\n  \n    \n\n\n\n\n\n\nmean\nmedian\nstd\ncount\n\n\ncol_0\nstat\nstat\nstat\nstat\n\n\nsurvivedC\n\n\n\n\n\n\n\n\nDied\n23.353831\n10.5\n34.145096\n808\n\n\nSurvived\n49.361184\n26.0\n68.648795\n500\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nMore natural with two grouping variables\n\nExample: Get summary for numeric type variables for each survival status and embarked port\n\npd.crosstab(\n  sub_titanic_data.embarkedC,\n  sub_titanic_data.survivedC,\n  values = sub_titanic_data.fare,\n  aggfunc = ['mean', 'count'])\n\n\n  \n    \n\n\n\n\n\n\nmean\ncount\n\n\nsurvivedC\nDied\nSurvived\nDied\nSurvived\n\n\nembarkedC\n\n\n\n\n\n\n\n\nCherbourg\n40.255592\n80.000807\n120\n150\n\n\nQueenstown\n11.615349\n13.833998\n79\n44\n\n\nSouthampton\n21.546160\n39.183470\n609\n304",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Numerical Summaries"
    ]
  },
  {
    "objectID": "01_Programming_in_python/15-Pandas_Data_Frames.html#creating-a-dataframe",
    "href": "01_Programming_in_python/15-Pandas_Data_Frames.html#creating-a-dataframe",
    "title": "Pandas Data Frames",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\nMost of the time we’ll read data from a raw file directly into a DataFrame\nHowever, you can create one with the pd.DataFrame() function\n\n\nimport pandas as pd\nimport numpy as np\n\n\nCreating a Data Frame from Lists\n\nzip lists of the same length together\nspecify columns via columns = list of appropriate length\nsepcify row names via index = list of appropriate length (if you want!)\n\n\n#populate some lists, each of equal length\nname = ['Alice', 'Bob','Charlie','Dave','Eve','Francesca','Greg']\nage = [20, 21, 22, 23, 22, 21, 22]\nmajor = ['Statistics', 'History', 'Chemistry', 'English', 'Math', 'Civil Engineering','Statistics']\n\n#create the data frame\nmy_df = pd.DataFrame(zip(name, age, major), columns = [\"name\", \"age\", \"major\"])\nmy_df\n\n\n  \n    \n\n\n\n\n\n\nname\nage\nmajor\n\n\n\n\n0\nAlice\n20\nStatistics\n\n\n1\nBob\n21\nHistory\n\n\n2\nCharlie\n22\nChemistry\n\n\n3\nDave\n23\nEnglish\n\n\n4\nEve\n22\nMath\n\n\n5\nFrancesca\n21\nCivil Engineering\n\n\n6\nGreg\n22\nStatistics\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n\n\nCreating a Data Frame from a Dictionary\n\nThe pd.DataFrame() function can create data frames from many objects\nFor a dictionary, the keys become the column names (values must be of the same length)\n\n\npeople = {'Name': ['Alice', 'Bob','Charlie','Dave','Eve','Francesca','Greg'],\n          'Age': [20, 21, 22, 23, 22, 21, 22],\n          'Major': ['Statistics', 'History', 'Chemistry', 'English', 'Math', 'Civil Engineering','Statistics'],\n         }\npeople\n\n{'Name': ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve', 'Francesca', 'Greg'],\n 'Age': [20, 21, 22, 23, 22, 21, 22],\n 'Major': ['Statistics',\n  'History',\n  'Chemistry',\n  'English',\n  'Math',\n  'Civil Engineering',\n  'Statistics']}\n\n\n\nmy_df = pd.DataFrame(people)\nmy_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n0\nAlice\n20\nStatistics\n\n\n1\nBob\n21\nHistory\n\n\n2\nCharlie\n22\nChemistry\n\n\n3\nDave\n23\nEnglish\n\n\n4\nEve\n22\nMath\n\n\n5\nFrancesca\n21\nCivil Engineering\n\n\n6\nGreg\n22\nStatistics\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n\n\nCreating a Data Frame from a NumPy Array\n\nIf you have a 2D numpy array, the conversion to a data frame is natural\nYou can specify the column names with columns = and the indices with index =\n\n\nmy_array = np.random.random((5,3))\nprint(my_array.shape)\nmy_array\n\n(5, 3)\n\n\narray([[0.29048793, 0.20192264, 0.13982855],\n       [0.03380887, 0.82833162, 0.48653212],\n       [0.21379655, 0.33554069, 0.80907267],\n       [0.31462832, 0.87751129, 0.45655808],\n       [0.15288996, 0.63591624, 0.88460099]])\n\n\n\nmy_df2 = pd.DataFrame(my_array, columns=[\"1st\", \"2nd\", \"3rd\"], index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\nmy_df2\n\n\n  \n    \n\n\n\n\n\n\n1st\n2nd\n3rd\n\n\n\n\na\n0.290488\n0.201923\n0.139829\n\n\nb\n0.033809\n0.828332\n0.486532\n\n\nc\n0.213797\n0.335541\n0.809073\n\n\nd\n0.314628\n0.877511\n0.456558\n\n\ne\n0.152890\n0.635916\n0.884601",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas Data Frames"
    ]
  },
  {
    "objectID": "01_Programming_in_python/15-Pandas_Data_Frames.html#indexing-a-data-frame",
    "href": "01_Programming_in_python/15-Pandas_Data_Frames.html#indexing-a-data-frame",
    "title": "Pandas Data Frames",
    "section": "Indexing a Data Frame",
    "text": "Indexing a Data Frame\n\nIndexing Columns with []\n\nDataFrames have a .columns attribute\n\n\nmy_df2.columns\n\nIndex(['1st', '2nd', '3rd'], dtype='object')\n\n\n\nAccess the columns using the column names and ‘selection brackets’\n\n\nmy_df2[\"1st\"]\n\na    0.290488\nb    0.033809\nc    0.213797\nd    0.314628\ne    0.152890\nName: 1st, dtype: float64\n\n\n\nNote that what gets returned is just a series!\n\n\ntype(my_df2[\"1st\"])\n\npandas.core.series.Series\n\n\n\nCan also return a column using its name via the attribute syntax\n\n\nmy_df.Major\n\n0           Statistics\n1              History\n2            Chemistry\n3              English\n4                 Math\n5    Civil Engineering\n6           Statistics\nName: Major, dtype: object\n\n\n\ntype(my_df.Major)\n\npandas.core.series.Series\n\n\n\nReturning more than one column is easy\nYou can give a list of the column names you want\n\n\nmy_df[['Name', 'Age']]\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\n\n\n\n\n0\nAlice\n20\n\n\n1\nBob\n21\n\n\n2\nCharlie\n22\n\n\n3\nDave\n23\n\n\n4\nEve\n22\n\n\n5\nFrancesca\n21\n\n\n6\nGreg\n22\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nNote you can’t use slicing for columns using just [] (we’ll need to us .iloc[] or .loc[])\nIf you try to index with slicing you get back appropriate rows (see below)\n\n\n\nIndexing Rows by Slicing with []\n\nSimilarly, you can index the rows using [] if you use a slice or a boolean array\n\n\nmy_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n0\nAlice\n20\nStatistics\n\n\n1\nBob\n21\nHistory\n\n\n2\nCharlie\n22\nChemistry\n\n\n3\nDave\n23\nEnglish\n\n\n4\nEve\n22\nMath\n\n\n5\nFrancesca\n21\nCivil Engineering\n\n\n6\nGreg\n22\nStatistics\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nmy_df[3:5] #get the 3rd and 4th rows\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n3\nDave\n23\nEnglish\n\n\n4\nEve\n22\nMath\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nmy_df2\n\n\n  \n    \n\n\n\n\n\n\n1st\n2nd\n3rd\n\n\n\n\na\n0.290488\n0.201923\n0.139829\n\n\nb\n0.033809\n0.828332\n0.486532\n\n\nc\n0.213797\n0.335541\n0.809073\n\n\nd\n0.314628\n0.877511\n0.456558\n\n\ne\n0.152890\n0.635916\n0.884601\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nmy_df2[1:5]\n\n\n  \n    \n\n\n\n\n\n\n1st\n2nd\n3rd\n\n\n\n\nb\n0.033809\n0.828332\n0.486532\n\n\nc\n0.213797\n0.335541\n0.809073\n\n\nd\n0.314628\n0.877511\n0.456558\n\n\ne\n0.152890\n0.635916\n0.884601\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nOddly, you can’t return a single row with just a number\nYou can return it using slicing (recall : usually doesn’t return the last value)\n\n\nmy_df2[1] #throws an error\n\nKeyError: 1\n\n\n\nmy_df2[1:2] #return just one row\n\n\n  \n    \n\n\n\n\n\n\n1st\n2nd\n3rd\n\n\n\n\nb\n0.033809\n0.828332\n0.486532\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n    \n  \n\n\n\n\nIndexing Rows Using a Boolean Array with []\n\nOften use a Boolean object to subset (rows with a True get returned, False do not)\n\n\nmy_df['Name'] == 'Alice' #create a boolean array\n\n0     True\n1    False\n2    False\n3    False\n4    False\n5    False\n6    False\nName: Name, dtype: bool\n\n\n\nmy_df[my_df['Name'] == 'Alice'] #return just the True rows\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n0\nAlice\n20\nStatistics\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n    \n  \n\n\n\nmy_df[my_df['Age'] &gt; 21] #return only rows that match\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n2\nCharlie\n22\nChemistry\n\n\n3\nDave\n23\nEnglish\n\n\n4\nEve\n22\nMath\n\n\n6\nGreg\n22\nStatistics\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\n\nCompound Logicals\n\nAll the standard compound logical operators exist\n& (and), | (or), ~ (not), ^ (xor - exclusive or)\n\n\n(my_df['Name'] == 'Alice')\n\n0     True\n1    False\n2    False\n3    False\n4    False\n5    False\n6    False\nName: Name, dtype: bool\n\n\n\n(my_df['Name'] == 'Greg')\n\n0    False\n1    False\n2    False\n3    False\n4    False\n5    False\n6     True\nName: Name, dtype: bool\n\n\n\nGet either/or for these two booleans\n\n\n(my_df['Name'] == 'Alice') | (my_df['Name'] == 'Greg')\n\n0     True\n1    False\n2    False\n3    False\n4    False\n5    False\n6     True\nName: Name, dtype: bool\n\n\n\nmy_df[(my_df['Name'] == 'Alice') | (my_df['Name'] == 'Greg')]\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n0\nAlice\n20\nStatistics\n\n\n6\nGreg\n22\nStatistics\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nWhen doing lots of logicals, you want to be careful and use () to keep things straight!\n\n\nmy_df[((my_df['Name'] == 'Alice') | (my_df['Name'] == 'Greg')) & (my_df['Age'] &gt; 21)]\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n6\nGreg\n22\nStatistics",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas Data Frames"
    ]
  },
  {
    "objectID": "01_Programming_in_python/15-Pandas_Data_Frames.html#operations-on-data-frames",
    "href": "01_Programming_in_python/15-Pandas_Data_Frames.html#operations-on-data-frames",
    "title": "Pandas Data Frames",
    "section": "Operations on Data Frames",
    "text": "Operations on Data Frames\n\n.head and .tail methods give the first few and last rows, respectively\n\n\nmy_df.head()\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n0\nAlice\n20\nStatistics\n\n\n1\nBob\n21\nHistory\n\n\n2\nCharlie\n22\nChemistry\n\n\n3\nDave\n23\nEnglish\n\n\n4\nEve\n22\nMath\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nmy_df.tail()\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nMajor\n\n\n\n\n2\nCharlie\n22\nChemistry\n\n\n3\nDave\n23\nEnglish\n\n\n4\nEve\n22\nMath\n\n\n5\nFrancesca\n21\nCivil Engineering\n\n\n6\nGreg\n22\nStatistics\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nshape attribute contains the dimensions of the data frame\n\n\nmy_df.shape\n\n(7, 3)\n\n\n\n.info() method gives information about the data frame\n\n\nmy_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 7 entries, 0 to 6\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   Name    7 non-null      object\n 1   Age     7 non-null      int64 \n 2   Major   7 non-null      object\ndtypes: int64(1), object(2)\nmemory usage: 296.0+ bytes\n\n\n\nmy_df2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 5 entries, a to e\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   1st     5 non-null      float64\n 1   2nd     5 non-null      float64\n 2   3rd     5 non-null      float64\ndtypes: float64(3)\nmemory usage: 332.0+ bytes\n\n\n\nObtain a quick contingency table with .value_counts() on a column\n\n\nmy_df[\"Major\"].value_counts()\n\nStatistics           2\nHistory              1\nChemistry            1\nEnglish              1\nMath                 1\nCivil Engineering    1\nName: Major, dtype: int64",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas Data Frames"
    ]
  },
  {
    "objectID": "01_Programming_in_python/13-EDA_Landing.html",
    "href": "01_Programming_in_python/13-EDA_Landing.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "The video below discusses the common steps when investigating data. This is usually referred to as an exploratory data analysis (EDA).\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "01_Programming_in_python/13-EDA_Landing.html#notes",
    "href": "01_Programming_in_python/13-EDA_Landing.html#notes",
    "title": "Exploratory Data Analysis",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "01_Programming_in_python/11-Dictionaries.html#creating-a-dictionary",
    "href": "01_Programming_in_python/11-Dictionaries.html#creating-a-dictionary",
    "title": "Plan",
    "section": "Creating a Dictionary",
    "text": "Creating a Dictionary\n\nCreating a dictionary using dict() and {}\n\nUse dict(supply_key_value_pairs) or {supply_key_value_pairs}\n\n\n{} #empty dictionary\nmydict = {\n  \"key1\": [12, -10, \"value1\"],  #key is specified first (must be immutable)\n  \"key2\": [11, \"value2\"],       #value is then given after a : (can be anything, doesn't need to match across keys)\n  \"key3\": \"value3\"\n  }\nmydict\n\n{'key1': [12, -10, 'value1'], 'key2': [11, 'value2'], 'key3': 'value3'}\n\n\n\nmydict2 = dict([\n  (1, ['hee', 'haw']),        #passing key value pairs as a tuple\n  (2, 'fa')\n  ])\nmydict2\n\n{1: ['hee', 'haw'], 2: 'fa'}\n\n\n\n\nCreating a dictionary using lists\n\nYou can create a dictionary using two lists and the zip() function\n\n\nkeys = [x for x in \"abcdefgh\"]\nvalues = [y for y in range(0,8)]\nprint(keys)\nprint(values)\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n[0, 1, 2, 3, 4, 5, 6, 7]\n\n\n\ndict(zip(keys, values))\n\n{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7}\n\n\n\n\nCreating a dictionary with dictionary comprehensions\n\nCan create a dictionary using dictionary comprehensions!\nSmilar to list comprehensions but we use { instead of [\n\n\nmydict = {i: i for i in range(0, 6)}\nmydict\n\n{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n\n\n\nmydict = {\"abcdef\"[i]: i**2 for i in range(0, 6)}\nmydict\n\n{'a': 0, 'b': 1, 'c': 4, 'd': 9, 'e': 16, 'f': 25}",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/11-Dictionaries.html#dictionary-operations",
    "href": "01_Programming_in_python/11-Dictionaries.html#dictionary-operations",
    "title": "Plan",
    "section": "Dictionary Operations",
    "text": "Dictionary Operations\n\nIndexing a Dictionary\n\nIndex with a [key] (remember unordered!)\n\n\nAFCDivisions = {\n  \"North\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"East\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"West\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"]\n  }\nAFCDivisions[\"North\"]\n\n['Steelers', 'Browns', 'Ravens', 'Bengals']\n\n\n\nYou can access the returned object in the same line of code\n\n\nAFCDivisions[\"North\"][0]\n\n'Steelers'\n\n\n\nWe can add new key/value pairs by simply referencing a key that doesn’t exist\nHere we add the “South” key with a silly value\n\n\nAFCDivisions = {\n  \"North\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"East\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"West\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"]\n  }\nAFCDivisions[\"South\"] = [1, 2]\nAFCDivisions\n\n{'North': ['Steelers', 'Browns', 'Ravens', 'Bengals'],\n 'East': ['Patriots', 'Jets', 'Dolphins', 'Bills'],\n 'West': ['Raiders', 'Chiefs', 'Chargers', 'Broncos'],\n 'South': [1, 2]}\n\n\n\nYou can iterate over the keys in a dictionary\n\n\nfor key in AFCDivisions:              #keys are what are iterated over\n    print(key, ' : ', AFCDivisions[key])\n\nNorth  :  ['Steelers', 'Browns', 'Ravens', 'Bengals']\nEast  :  ['Patriots', 'Jets', 'Dolphins', 'Bills']\nWest  :  ['Raiders', 'Chiefs', 'Chargers', 'Broncos']\nSouth  :  [1, 2]\n\n\n\nYou can overwrite the values similar to how you can add a key/value pair after the fact. Here we overwrite the “South” value.\n\n\nAFCDivisions = {\n  \"North\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"East\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"West\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"]\n  }\nAFCDivisions[\"South\"] = [1, 2]\nAFCDivisions[\"South\"] = [\"Texans\", \"Colts\", \"Jaguars\", \"Titans\"]\nfor key in AFCDivisions:\n    print(key, ' : ', AFCDivisions[key])\n\nNorth  :  ['Steelers', 'Browns', 'Ravens', 'Bengals']\nEast  :  ['Patriots', 'Jets', 'Dolphins', 'Bills']\nWest  :  ['Raiders', 'Chiefs', 'Chargers', 'Broncos']\nSouth  :  ['Texans', 'Colts', 'Jaguars', 'Titans']\n\n\n\n\n\nDictionary Packing & Unpacking\n\nWe can pack dictionaries using ** similar to how we packed a list!\nHere we create a dictionary called Divisions where we pack two dictionaries inside it\n\n\nAFCDivisions = {\n  \"AFCNorth\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"AFCEast\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"AFCWest\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"],\n  \"AFCSouth\": [\"Texans\", \"Colts\", \"Jaguars\", \"Titans\"]\n  }\n\nNFCDivisions = {\n  \"NFCNorth\" : [\"Lions\", \"Bears\", \"Packers\", \"Vikings\"],\n  \"NFCEast\"  : [\"Giants\", \"Cowboys\", \"Eagles\", \"Admirals\"]\n}\n\nDivisions = {**AFCDivisions, **NFCDivisions}\nfor key in Divisions:\n    print(key, ' : ', Divisions[key])\n\nAFCNorth  :  ['Steelers', 'Browns', 'Ravens', 'Bengals']\nAFCEast  :  ['Patriots', 'Jets', 'Dolphins', 'Bills']\nAFCWest  :  ['Raiders', 'Chiefs', 'Chargers', 'Broncos']\nAFCSouth  :  ['Texans', 'Colts', 'Jaguars', 'Titans']\nNFCNorth  :  ['Lions', 'Bears', 'Packers', 'Vikings']\nNFCEast  :  ['Giants', 'Cowboys', 'Eagles', 'Admirals']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/11-Dictionaries.html#dictionary-methods",
    "href": "01_Programming_in_python/11-Dictionaries.html#dictionary-methods",
    "title": "Plan",
    "section": "Dictionary Methods",
    "text": "Dictionary Methods\nMany useful methods\n\nIndex with .get() instead of the other ways we’ve done\nAdvantage is that it doesn’t throw an error if key doesn’t exist\n\n\nAFCDivisions = {\n  \"North\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"East\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"West\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"],\n  \"South\": [\"Texans\", \"Colts\", \"Jaguars\", \"Titans\"]\n  }\nAFCDivisions.get(\"South\")\n\n['Texans', 'Colts', 'Jaguars', 'Titans']\n\n\n\nAFCDivisions.get(\"Northeast\") #doesn't throw an error\n\n\nAFCDivisions[\"Northeast\"] #throws an error\n\nKeyError: 'Northeast'\n\n\n\nReturn keys with .keys(); values with .values()\n\n\nAFCDivisions = {\n  \"North\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"East\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"West\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"],\n  \"South\": [\"Texans\", \"Colts\", \"Jaguars\", \"Titans\"]\n  }\nAFCDivisions.keys()\n\ndict_keys(['North', 'East', 'West', 'South'])\n\n\n\nAFCDivisions.values()\n\ndict_values([['Steelers', 'Browns', 'Ravens', 'Bengals'], ['Patriots', 'Jets', 'Dolphins', 'Bills'], ['Raiders', 'Chiefs', 'Chargers', 'Broncos'], ['Texans', 'Colts', 'Jaguars', 'Titans']])\n\n\n\nReturn and remove a specified key with .pop() (similar to the list method)\n\n\nAFCDivisions = {\n  \"North\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"East\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"West\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"],\n  \"South\": [\"Texans\", \"Colts\", \"Jaguars\", \"Titans\"]\n  }\nAFCDivisions.pop(\"North\") #modifies the dictionary\n\n['Steelers', 'Browns', 'Ravens', 'Bengals']\n\n\n\nfor key in AFCDivisions:\n    print(key, ' : ', AFCDivisions[key])\n\nEast  :  ['Patriots', 'Jets', 'Dolphins', 'Bills']\nWest  :  ['Raiders', 'Chiefs', 'Chargers', 'Broncos']\nSouth  :  ['Texans', 'Colts', 'Jaguars', 'Titans']\n\n\n\nMerge in another dictionary with .update()\nVery similar to dictionary packing done above but it replaces modifies one of the dictionaries\n\n\nDivisions = {\n  \"AFCNorth\": [\"Steelers\", \"Browns\", \"Ravens\", \"Bengals\"],\n  \"AFCEast\" : [\"Patriots\", \"Jets\", \"Dolphins\", \"Bills\"],\n  \"AFCWest\" : [\"Raiders\", \"Chiefs\", \"Chargers\", \"Broncos\"],\n  \"AFCSouth\": [\"Texans\", \"Colts\", \"Jaguars\", \"Titans\"]\n  }\nNFCNorth = {\n  \"NorthNFC\": [\"Lions\", \"Packers\", \"Bears\", \"Vikings\"]\n  }\nDivisions.update(NFCNorth) #combine the dictionaries\nfor key in Divisions.keys():\n    print(key, \" : \", Divisions[key])\n\nAFCNorth  :  ['Steelers', 'Browns', 'Ravens', 'Bengals']\nAFCEast  :  ['Patriots', 'Jets', 'Dolphins', 'Bills']\nAFCWest  :  ['Raiders', 'Chiefs', 'Chargers', 'Broncos']\nAFCSouth  :  ['Texans', 'Colts', 'Jaguars', 'Titans']\nNorthNFC  :  ['Lions', 'Packers', 'Bears', 'Vikings']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/09-Control_Flow.html",
    "href": "01_Programming_in_python/09-Control_Flow.html",
    "title": "Control Flow",
    "section": "",
    "text": "Control flow just refers to the order in which a language executes code\nIn python\n\nUsing conditional logic (if, elif, and else)\nLooping (for or while for instance)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Control Flow"
    ]
  },
  {
    "objectID": "01_Programming_in_python/09-Control_Flow.html#conditional-statements",
    "href": "01_Programming_in_python/09-Control_Flow.html#conditional-statements",
    "title": "Control Flow",
    "section": "Conditional Statements",
    "text": "Conditional Statements\n\nChoose which portions of your code to execute by using conditional statements!\nAn if statement changes how a program behaves based on a condition\n\nCondition comes in the form of a boolean\n\nRecall: Booleans are True or False\n\nCan be treated as 1 and 0\nMany functions to create bools (.is_*() methods, bool() function)\n\n\n\nif Syntax\n\nExample of if with no further conditional logic:\n\nif boolean:\n    #If boolean is true, execute the chunk of code that is indented\n    #Four spaces is recommended but any indentation can technically be used\n    statement1\n    statement2\n    \n#code not indented would then execute as normal\n\nif Example\nPrinting different strings using if statements\n\ntemp = 30\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n\n30 degrees is cold.\n\n\n\ntemp = 100\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n\nWe can have multiple statements that are executed within a block if the condition is True.\n\ntemp = 30\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n    print(\"Wear a jacket outside!\")\n\n\ntemp = 100\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n    print(\"Wear a jacket outside!\")\nif temp &gt;= 50:\n    print(temp, \"degrees is not cold.\")\n\n\n\n\nif with else Syntax\nWith the last example above, we see something we often want to do: - check a condition (temp &lt; 50), if true execute some code - if that same condition is false - or the opposite is true (temp &gt;= 50) - then execute something else\nThis can be taken care of with the else statement. The else statement immediately following an if block allows for execution of code only when the above condition(s) were (all) False\nif boolean:\n    execute this code\nelse:\n    execute this code\nthis is equivalent to\nif boolean:\n    execute this code\nif not boolean:\n    execute this code\n\ntemp = 100\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n    print(\"Wear a jacket outside!\")\nelse:\n    print(temp, \"degrees is not cold.\")\n\n100 degrees is not cold.\n\n\n\n\nif, elif, and else\nYou can check additional conditions using elif which stands for ‘else if’.\nThis condition is only checked if the all the above conditions were False.\nif boolean1:\n    #if boolean1 is True\n    execute this code  \nelif boolean2:\n    #if boolean1 is False, check if boolean2 is True\n    #if True\n    execute this code\nelif boolean3:\n    #if boolean1 and boolean2 are False, check if boolean3 is True\n    #if True\n    execute this code\nelse:\n    # if no conditions met\n    execute this code\n\ntemp = 40\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n    print(\"Wear a jacket outside!\")\nelif temp &lt; 70:\n    print(temp, \"degrees is kind of cold...\")\n    print(\"You may want to bring an umbrella in case it rains!\")\nelse:\n    print(temp, \"degrees is not cold.\")\n\n40 degrees is cold.\nWear a jacket outside!\n\n\n\ntemp = 60\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n    print(\"Wear a jacket outside!\")\nelif temp &lt; 70:\n    print(temp, \"degrees is kind of cold...\")\n    print(\"You may want to bring an umbrella in case it rains!\")\nelse:\n    print(temp, \"degrees is not cold.\")\n\n60 degrees is kind of cold...\nYou may want to bring an umbrella in case it rains!\n\n\n\ntemp = 100\nif temp &lt; 50:\n    print(temp, \"degrees is cold.\")\n    print(\"Wear a jacket outside!\")\nelif temp &lt; 70:\n    print(temp, \"degrees is kind of cold...\")\n    print(\"You may want to bring an umbrella in case it rains!\")\nelse:\n    print(temp, \"degrees is not cold.\")\n\n100 degrees is not cold.",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Control Flow"
    ]
  },
  {
    "objectID": "01_Programming_in_python/09-Control_Flow.html#loops",
    "href": "01_Programming_in_python/09-Control_Flow.html#loops",
    "title": "Control Flow",
    "section": "Loops",
    "text": "Loops\n\nOften a repetitive task must be done\nTask requires a small change each time it is done\n\nCopy and pasting the same code with minimal changes isn’t ideal\n\n\n\nLoop Example\n\nSuppose we’ve observed the eye colors of 15 people\nEye color coded as either 1 (blue), 2 (brown), 3 (green), 4 (other)\nWant to create a new variable that has the descriptive values\n\n\n#data stored in a 'list'\neye_color = [3, 2, 2, 1, 2, 1, 2, 4, 3, 2, 2, 1, 2, 2]\n\nGoal: Create a new variable that has the descriptive values - Recall list elements are indexed using [index] (like other sequence type objects such as strings)\n\nprint(eye_color[0])\nprint(eye_color[1])\n\n3\n2\n\n\n\nWe could consider using conditional logic to print out the descriptive string\n\n\neye_color = [3, 2, 2, 1, 2, 1, 2, 4, 3, 2, 2, 1, 2, 2]\n\nif eye_color[0] == 1:\n    print(\"blue\")\nelif eye_color[0] == 2:\n    print(\"brown\")\nelif eye_color[0] == 3:\n    print(\"green\")\nelse:\n    print(\"other\")\n\ngreen\n\n\n\n\n\nLoop Syntax\n\nInstead of repeating and modifying code, use a loop!\n\nfor index in values:\n     code to be run\n\nindex argument defines a counter, or variable, that varies each time the code within the loop is executed\nvalues argument defines which values the index takes on in these iterations\n\nThese values do not have to be numeric!\n\n\n\nLoop Toy Examples\n\nRun the code below and feel free to modify things to see what happens!\n\n\nfor index in [\"cat\", \"hat\", \"worm\"]:\n    print(index)\n\ncat\nhat\nworm\n\n\n\nvalues = list(range(10)) #recall range is an iterator-type object, list gets the values out\nvalues\nfor i in values:\n    print(i)\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\neye_color = [3, 2, 2, 1, 2, 1, 2, 4, 3, 2, 2, 1, 2, 2]\nlist(range(len(eye_color)))\nrange(len(eye_color))\nvalues = iter(range(len(eye_color)))\nprint(next(values))\nprint(next(values))\nprint(next(values))\n\n0\n1\n2\n\n\nBack to our example. We want to print out the more descriptive name depending on what the numeric value is.\nLet’s loop through all the eye_color values using a for loop. To do so, we’ll use the range() function with the len(eye_color) as its argument.\nRecall: range() is an iterator-type object. A for loop will automatically go over the values the range indicates. When we give range() just one argument it defaults to a range of 0 to that value (but that value isn’t included).\n\nfor i in range(len(eye_color)):\n    if eye_color[i] == 1:\n        print(\"blue\")\n    elif eye_color[i] == 2:\n        print(\"brown\")\n    elif eye_color[i] == 3:\n        print(\"green\")\n    else:\n        print(\"other\")\n\ngreen\nbrown\nbrown\nblue\nbrown\nblue\nbrown\nother\ngreen\nbrown\nbrown\nblue\nbrown\nbrown\n\n\nWe don’t really need to use a set of numeric values to iterate over (via range()). We can iterate over anything that is iterable. All sequence type objects are iterable (like lists and strings).\nHere we’ll iterate over the eye_color list itself.\n\nfor i in eye_color:\n    if i == 1:\n        print(\"blue\")\n    elif i == 2:\n        print(\"brown\")\n    elif i == 3:\n        print(\"green\")\n    else:\n        print(\"other\")\n\ngreen\nbrown\nbrown\nblue\nbrown\nblue\nbrown\nother\ngreen\nbrown\nbrown\nblue\nbrown\nbrown\n\n\n\n\n\n\nOther Looping Commands\n\nOccassionally we want to jump out of a for loop. This can be done with break\n\n\nfor i in range(5):\n    if i == 3:\n        break\n    print(i)\n\n0\n1\n2\n\n\n\nThe continue command jumps to the next iteration of the loop without finishing the current iteration\n\n\nfor i in range(5):\n    if i == 3:\n        continue\n    print(i)\n\n0\n1\n2\n4\n\n\n\n\n\nWhile Loops\n\nWhile loops are similar to for loops but they loop until a condition is reached\n\nUseful when we don’t know in advance how many loop iterations we should execute\n\nGeneral syntax of a while loop:\n\nwhile expression:\n    #code block to execute\n    block\n\nthe expression is sometimes called the loop condition\nAt each iteration of the loop, python evaluates the expression\n\nIf the expression evaluates to False, the loop exits\nIf the expression evaluates to True, the loop body is executed again\n\n\n\nWhile Loop Example\nWhen using while loops, we usually modify the condition within the body of the while loop (or use a break to jump out when needed).\n\nrabbits = 3\nwhile rabbits &gt; 0:\n    print(rabbits)\n    rabbits = rabbits - 1\n\n3\n2\n1\n\n\n\n\n\nVideo Demo\nThis quick video demo shows an example of implementing a loop in python. We’ll look at the Fizzbuzz example. Then we’ll write a quick number guessing game!\nRemember to pop these out into a panopto window as they are much easier to watch that way!\n\nfrom IPython.display import IFrame\nIFrame(src=\"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=ed3118c1-feb1-4d7f-a98c-b0f800ebfd46&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Control Flow"
    ]
  },
  {
    "objectID": "01_Programming_in_python/07-Common_Uses_For_Data_Landing.html",
    "href": "01_Programming_in_python/07-Common_Uses_For_Data_Landing.html",
    "title": "Common Uses for Data",
    "section": "",
    "text": "The video below discusses the common ways we use data. We discuss the general idea of statistical learning and using data for descriptive purposes, for predictive purposes, in order to make statistical inferences, and to find patterns in data.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/07-Common_Uses_For_Data_Landing.html#notes",
    "href": "01_Programming_in_python/07-Common_Uses_For_Data_Landing.html#notes",
    "title": "Common Uses for Data",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html",
    "title": "List Basics & Strings",
    "section": "",
    "text": "Justin Post",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#big-picture",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#big-picture",
    "title": "List Basics & Strings",
    "section": "Big Picture",
    "text": "Big Picture\nWe’ve learned a little about how python functions and how our coding environment works.\nNext, we’ll go through and look at a number of common data structures used in python. We’ll try to follow a similar structure for each where we\n\nintroduce the data structure\ndiscuss common functions and methods\ndo some quick examples of using them\n\nAlong the way we’ll learn some things we want to do with data along with control flow operators (if/then/else, looping, etc.)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#data-structures",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#data-structures",
    "title": "List Basics & Strings",
    "section": "Data Structures",
    "text": "Data Structures\n\nBuilt-in data types\n\nStrings, Numeric types, Booleans\nCompound data types (Lists, Tuples, Dictionaries)\n\nPython modules with common data types\n\nNumPy arrays\nPandas data frames\n\n\nLists, Tuples, Strings, and arrays are all sequences (ish) so they have similar functions and behavior!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#constructing-a-list",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#constructing-a-list",
    "title": "List Basics & Strings",
    "section": "Constructing a List",
    "text": "Constructing a List\nFour major ways to create a list - [element1, element2] - list((element1, element2, ...)) - an empty list and use the append method to add elements - list comprehensions\n\nx = [10, 15, 10, 100, \"Help!\"]\ntype(x)\nx\n\n[10, 15, 10, 100, 'Help!']\n\n\n\n#Note the 'extra' set of () needed\ny = list((\"Python\", \"List\", 5))\ny\n\n['Python', 'List', 5]\n\n\n\n#range() is a function that is 'iterable'. By putting it in a list, we get the values out\nrange(1,10)\n\nrange(1, 10)\n\n\n\nz = list(range(1,10))\nz\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n#On sequence type objects, * replicated the object a certain number of times\nz * 2\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n#lists can contain lists!\nw = [list(range(1,3)), z, 3]\nw\n\n[[1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9], 3]",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#list-operations",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#list-operations",
    "title": "List Basics & Strings",
    "section": "List Operations",
    "text": "List Operations\n\nIndexing\n\nIndex with a [] after the object name\nCounting starts at 0\n\n\nx = [10, 15, 10, 100, \"Help!\"]\nprint(x[0])\nprint(x[1])\nprint(x[-1])\n\n10\n15\nHelp!\n\n\n\nw = [list(range(1,5)), x, 3]\nprint(w[0])\nprint(w[1])\nprint(w[1][0])\nprint(w[-1])\n\n[1, 2, 3, 4]\n[10, 15, 10, 100, 'Help!']\n10\n3\n\n\n\n\n\nSlicing\n\nWe can return multiple elements at once with :\n\nLeaving it blank on the left gives everything up until the index prior to the number given\nBlank on the right gives everything after the desired starting index (counting starts at 0)\n\n\n\nx = [10, 15, 10, 100, \"Help!\"]\nx\n\n[10, 15, 10, 100, 'Help!']\n\n\n\nx[:2]\n\n[10, 15]\n\n\n\nx[:3]\n\n[10, 15, 10]\n\n\n\nx[1:]\n\n[15, 10, 100, 'Help!']\n\n\n\nx[1:3]\n\n[15, 10]\n\n\n\n#create a list with some lists inside it\nw = [list(range(1,5)), x, 3]\nw\n\n[[1, 2, 3, 4], [10, 15, 10, 100, 'Help!'], 3]\n\n\n\nw[:2]\n\n[[1, 2, 3, 4], [10, 15, 10, 100, 'Help!']]\n\n\n\nw[1]\n\n[10, 15, 10, 100, 'Help!']\n\n\n\n#can index what gets returned if that makes sense to do!\nw[1][1:3]\n\n[15, 10]",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#functions-methods",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#functions-methods",
    "title": "List Basics & Strings",
    "section": "Functions & Methods",
    "text": "Functions & Methods\nRecall: Two major ways to do an operation on a variable/object:\n\nFunctions: function_name(myvar, other_args)\n\n\nmyList = [1, 10, 100, 1000]\nlen(myList)\nmax(myList)\n\n1000\n\n\n\nMethods: myvar.method(other_args)\n\n\nmyList.pop(3)\n\n1000\n\n\n\nmyList\n\n[1, 10, 100]\n\n\n\nmyList.append(100000)\nmyList\n\n[1, 10, 100, 100000]\n\n\nThe methods for lists are listed at the top of this page of the python 3 documentation.\nSome of the common functions in python are listed on this page of the documentation.",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#constructing-strings",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#constructing-strings",
    "title": "List Basics & Strings",
    "section": "Constructing Strings",
    "text": "Constructing Strings\n\nText is represented as a sequence of characters (letters, digits, and symbols) called a string (Nice reference)\n\nData type: str\nCreated using single or double quotes\n\n\n\n#can use either ' or \" to create a string\n'wolf'\n\"pack\"\n\n'pack'\n\n\n\nx = 'wolf'\nprint(type(x))\nprint(x)\n\n&lt;class 'str'&gt;\nwolf\n\n\n\nInstead of ’ or “, you can use str() to create a string. This is called casting\n\n\nx = str(10)\nx\n\n'10'",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#string-operations",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#string-operations",
    "title": "List Basics & Strings",
    "section": "String Operations",
    "text": "String Operations\n\nIndexing\n\nmy_string = \"wolf pack\"\n\n\nEach element of the my_string variable contains a different character from \"wolf pack\"\nAs with lists, we access these elements using []\nThe first element is indexed by 0\n\n\nmy_string[0]\n\n'w'\n\n\n\nmy_string[1]\n\n'o'\n\n\n\nAccess the elements of the my_string variable in reverse order using a - (start with 1 not 0 for the last element though!)\n\n\nmy_string[-1]\n\n'k'\n\n\n\n\n\nSlicing\n\nmy_string = \"wolf pack\"\n\n\nSlicing a string refers to returning more than one character of a string (similar to lists!)\n\nSlice using :\n\n\n\nmy_string[4:]\n\n' pack'\n\n\n\nmy_string[:3]\n\n'wol'\n\n\n\nmy_string[3:4]\n\n'f'\n\n\n\n#s[:i] + s[i:] gives back s\nmy_string[:3] + my_string[3:]\n\n'wolf pack'\n\n\n\n\n\nConcatenating\nSeveral built-in operations on strings\n\n+ will concatenate two strings together\n\n\n'wolf' + ' pack'\n\n'wolf pack'\n\n\n\n'wolf' + ' pack' + \" is\" + \" cool\"\n\n'wolf pack is cool'\n\n\n\nString literals next to each other are automatically concatenated\n\n\n'wolf' ' pack'\n'wolf' ' pack' ' is' ' cool'\n\n\nThis won’t work on variables though!\n\n\nx = 'wolf'\n#throws an error\nx ' pack'\n\nSyntaxError: ignored\n\n\n\nx + ' pack'\n\n\n\n\nNo Implicit Coercion\nCan operator + be applied to a string and a numeric value?\n\n#throws an error\n'wolfpack' + 2\n\nTypeError: ignored\n\n\n\nTo join a string and number cast the number as a string!\n\n\n'Four score and ' + str(7) + ' years ago'\n\n\nString Operations (Concatenating Repeats)\nYou can also repeat strings with the * operator and an integer (again similar to a list)\n\n'go pack ' * 3\n'go pack ' * 0\n'go pack ' * -5",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#functions-methods-1",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#functions-methods-1",
    "title": "List Basics & Strings",
    "section": "Functions & Methods",
    "text": "Functions & Methods\n\nSeveral built-in operations on strings\n\nlen() returns the number of characters\nsorted() returns the sorted values as a list\n\n\n\nlen('wolf pack')\n\n9\n\n\n\nlen('241!')\n\n4\n\n\n\nlen(' ')\n\n1\n\n\n\nlen(\"\")\n\n0\n\n\n\nsorted(\"wolf pack\")\n\n[' ', 'a', 'c', 'f', 'k', 'l', 'o', 'p', 'w']\n\n\n\nMany methods as well. Some common examples are below:\n\n\nmy_string = '  wolf pack  '\n\n\n#create an upper case version of the string\nmy_string.upper()\n\n'  WOLF PACK  '\n\n\n\n#this doesn't overwrite the string though!\nmy_string\n\n'  wolf pack  '\n\n\n\n#remove whitespace from the ends\nmy_string.strip()\n\n'wolf pack'\n\n\n\n#replace elements\nmy_string.replace(\"a\", \"e\")\n\n'  wolf peck  '\n\n\n\n#split the string by a character (here a space) (note this returns a list!)\nmy_string.strip().split(\" \")\n\n['wolf', 'pack']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#immutability-of-strings",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#immutability-of-strings",
    "title": "List Basics & Strings",
    "section": "Immutability of Strings",
    "text": "Immutability of Strings\n\nStrings are immutable\n\nIndividual characters can’t be modified\n\n\n\nmy_string = \"wolf pack\"\n#this will throw an error\nmy_string[1] = \"a\"\n\nTypeError: ignored",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#inserting-values-into-strings",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#inserting-values-into-strings",
    "title": "List Basics & Strings",
    "section": "Inserting Values Into Strings",
    "text": "Inserting Values Into Strings\n\nCan use the format() method to insert numbers into strings:\n\n\nyears = 3\nsalary = 100000\nmyorder = \"I have {1} years of experience and would like a salary of {0}.\"\nprint(myorder.format(salary, years))\n\nI have 3 years of experience and would like a salary of 100000.\n\n\n\nDon’t need the numbers, but then you must position correctly\n\n\nmyorder = \"I have {} years of experience and would like a salary of {}.\"\nprint(myorder.format(years, salary))\n\nI have 3 years of experience and would like a salary of 100000.\n\n\nThere are a few other ways to do this that we’ll visit later on!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/05-List_Basics_Strings.html#video-demo",
    "href": "01_Programming_in_python/05-List_Basics_Strings.html#video-demo",
    "title": "List Basics & Strings",
    "section": "Video Demo",
    "text": "Video Demo\nThis quick video demonstration shows some quick exercises with strings and lists.\n\nfrom IPython.display import IFrame\nIFrame(src = \"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=72bd0292-4c48-4064-8977-b0ef017167f6&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Learning `python`",
      "List Basics & Strings"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html",
    "href": "01_Programming_in_python/03-Modules.html",
    "title": "Modules",
    "section": "",
    "text": "Justin Post\nNow that we know the basics of how python works and a little bit about how our programming environment functions, we can look at python ‘modules’. If you know R, these are smilar to R packages.",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html#what-is-a-module",
    "href": "01_Programming_in_python/03-Modules.html#what-is-a-module",
    "title": "Modules",
    "section": "What is a Module?",
    "text": "What is a Module?\n\nA collection of (related) definitions and statements that are grouped together in a single file (a .py file)\n\nGives access to additional functionality\n\nSome come standard, others must be installed (i.e. downloaded)\n\nModules are then imported into your session\n\nFully imported with import module_name\nSelective import with from module_name import thing1 thing2",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html#commonly-used-built-in-already-downloaded-modules",
    "href": "01_Programming_in_python/03-Modules.html#commonly-used-built-in-already-downloaded-modules",
    "title": "Modules",
    "section": "Commonly Used Built-in (Already Downloaded) Modules",
    "text": "Commonly Used Built-in (Already Downloaded) Modules\n\nmath\n\nMath constants (pi, e, etc.)\nFunctions commonly used functions (exp(), sin(), sqrt(), etc.)\n\nrandom\n\nRandom sampling and random number generation\n\nstatistics\n\nSummary stats (but scipy and pandas have a lot more)\n\ndatetime\n\nFunctionality for working with dates",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html#importing-a-module",
    "href": "01_Programming_in_python/03-Modules.html#importing-a-module",
    "title": "Modules",
    "section": "Importing a Module",
    "text": "Importing a Module\n\nFor built-in modules, we can load them into our session with import\n\n\nimport math\ntype(math)\n\nmodule\n\n\n\nCan see the functionality using help()\n\n\nhelp(math)\n\nHelp on built-in module math:\n\nNAME\n    math\n\nDESCRIPTION\n    This module provides access to the mathematical functions\n    defined by the C standard.\n\nFUNCTIONS\n    acos(x, /)\n        Return the arc cosine (measured in radians) of x.\n        \n        The result is between 0 and pi.\n    \n    acosh(x, /)\n        Return the inverse hyperbolic cosine of x.\n    \n    asin(x, /)\n        Return the arc sine (measured in radians) of x.\n        \n        The result is between -pi/2 and pi/2.\n    \n    asinh(x, /)\n        Return the inverse hyperbolic sine of x.\n    \n    atan(x, /)\n        Return the arc tangent (measured in radians) of x.\n        \n        The result is between -pi/2 and pi/2.\n    \n    atan2(y, x, /)\n        Return the arc tangent (measured in radians) of y/x.\n        \n        Unlike atan(y/x), the signs of both x and y are considered.\n    \n    atanh(x, /)\n        Return the inverse hyperbolic tangent of x.\n    \n    ceil(x, /)\n        Return the ceiling of x as an Integral.\n        \n        This is the smallest integer &gt;= x.\n    \n    comb(n, k, /)\n        Number of ways to choose k items from n items without repetition and without order.\n        \n        Evaluates to n! / (k! * (n - k)!) when k &lt;= n and evaluates\n        to zero when k &gt; n.\n        \n        Also called the binomial coefficient because it is equivalent\n        to the coefficient of k-th term in polynomial expansion of the\n        expression (1 + x)**n.\n        \n        Raises TypeError if either of the arguments are not integers.\n        Raises ValueError if either of the arguments are negative.\n    \n    copysign(x, y, /)\n        Return a float with the magnitude (absolute value) of x but the sign of y.\n        \n        On platforms that support signed zeros, copysign(1.0, -0.0)\n        returns -1.0.\n    \n    cos(x, /)\n        Return the cosine of x (measured in radians).\n    \n    cosh(x, /)\n        Return the hyperbolic cosine of x.\n    \n    degrees(x, /)\n        Convert angle x from radians to degrees.\n    \n    dist(p, q, /)\n        Return the Euclidean distance between two points p and q.\n        \n        The points should be specified as sequences (or iterables) of\n        coordinates.  Both inputs must have the same dimension.\n        \n        Roughly equivalent to:\n            sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))\n    \n    erf(x, /)\n        Error function at x.\n    \n    erfc(x, /)\n        Complementary error function at x.\n    \n    exp(x, /)\n        Return e raised to the power of x.\n    \n    expm1(x, /)\n        Return exp(x)-1.\n        \n        This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.\n    \n    fabs(x, /)\n        Return the absolute value of the float x.\n    \n    factorial(x, /)\n        Find x!.\n        \n        Raise a ValueError if x is negative or non-integral.\n    \n    floor(x, /)\n        Return the floor of x as an Integral.\n        \n        This is the largest integer &lt;= x.\n    \n    fmod(x, y, /)\n        Return fmod(x, y), according to platform C.\n        \n        x % y may differ.\n    \n    frexp(x, /)\n        Return the mantissa and exponent of x, as pair (m, e).\n        \n        m is a float and e is an int, such that x = m * 2.**e.\n        If x is 0, m and e are both 0.  Else 0.5 &lt;= abs(m) &lt; 1.0.\n    \n    fsum(seq, /)\n        Return an accurate floating point sum of values in the iterable seq.\n        \n        Assumes IEEE-754 floating point arithmetic.\n    \n    gamma(x, /)\n        Gamma function at x.\n    \n    gcd(*integers)\n        Greatest Common Divisor.\n    \n    hypot(...)\n        hypot(*coordinates) -&gt; value\n        \n        Multidimensional Euclidean distance from the origin to a point.\n        \n        Roughly equivalent to:\n            sqrt(sum(x**2 for x in coordinates))\n        \n        For a two dimensional point (x, y), gives the hypotenuse\n        using the Pythagorean theorem:  sqrt(x*x + y*y).\n        \n        For example, the hypotenuse of a 3/4/5 right triangle is:\n        \n            &gt;&gt;&gt; hypot(3.0, 4.0)\n            5.0\n    \n    isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)\n        Determine whether two floating point numbers are close in value.\n        \n          rel_tol\n            maximum difference for being considered \"close\", relative to the\n            magnitude of the input values\n          abs_tol\n            maximum difference for being considered \"close\", regardless of the\n            magnitude of the input values\n        \n        Return True if a is close in value to b, and False otherwise.\n        \n        For the values to be considered close, the difference between them\n        must be smaller than at least one of the tolerances.\n        \n        -inf, inf and NaN behave similarly to the IEEE 754 Standard.  That\n        is, NaN is not close to anything, even itself.  inf and -inf are\n        only close to themselves.\n    \n    isfinite(x, /)\n        Return True if x is neither an infinity nor a NaN, and False otherwise.\n    \n    isinf(x, /)\n        Return True if x is a positive or negative infinity, and False otherwise.\n    \n    isnan(x, /)\n        Return True if x is a NaN (not a number), and False otherwise.\n    \n    isqrt(n, /)\n        Return the integer part of the square root of the input.\n    \n    lcm(*integers)\n        Least Common Multiple.\n    \n    ldexp(x, i, /)\n        Return x * (2**i).\n        \n        This is essentially the inverse of frexp().\n    \n    lgamma(x, /)\n        Natural logarithm of absolute value of Gamma function at x.\n    \n    log(...)\n        log(x, [base=math.e])\n        Return the logarithm of x to the given base.\n        \n        If the base not specified, returns the natural logarithm (base e) of x.\n    \n    log10(x, /)\n        Return the base 10 logarithm of x.\n    \n    log1p(x, /)\n        Return the natural logarithm of 1+x (base e).\n        \n        The result is computed in a way which is accurate for x near zero.\n    \n    log2(x, /)\n        Return the base 2 logarithm of x.\n    \n    modf(x, /)\n        Return the fractional and integer parts of x.\n        \n        Both results carry the sign of x and are floats.\n    \n    nextafter(x, y, /)\n        Return the next floating-point value after x towards y.\n    \n    perm(n, k=None, /)\n        Number of ways to choose k items from n items without repetition and with order.\n        \n        Evaluates to n! / (n - k)! when k &lt;= n and evaluates\n        to zero when k &gt; n.\n        \n        If k is not specified or is None, then k defaults to n\n        and the function returns n!.\n        \n        Raises TypeError if either of the arguments are not integers.\n        Raises ValueError if either of the arguments are negative.\n    \n    pow(x, y, /)\n        Return x**y (x to the power of y).\n    \n    prod(iterable, /, *, start=1)\n        Calculate the product of all the elements in the input iterable.\n        \n        The default start value for the product is 1.\n        \n        When the iterable is empty, return the start value.  This function is\n        intended specifically for use with numeric values and may reject\n        non-numeric types.\n    \n    radians(x, /)\n        Convert angle x from degrees to radians.\n    \n    remainder(x, y, /)\n        Difference between x and the closest integer multiple of y.\n        \n        Return x - n*y where n*y is the closest integer multiple of y.\n        In the case where x is exactly halfway between two multiples of\n        y, the nearest even value of n is used. The result is always exact.\n    \n    sin(x, /)\n        Return the sine of x (measured in radians).\n    \n    sinh(x, /)\n        Return the hyperbolic sine of x.\n    \n    sqrt(x, /)\n        Return the square root of x.\n    \n    tan(x, /)\n        Return the tangent of x (measured in radians).\n    \n    tanh(x, /)\n        Return the hyperbolic tangent of x.\n    \n    trunc(x, /)\n        Truncates the Real x to the nearest Integral toward 0.\n        \n        Uses the __trunc__ magic method.\n    \n    ulp(x, /)\n        Return the value of the least significant bit of the float x.\n\nDATA\n    e = 2.718281828459045\n    inf = inf\n    nan = nan\n    pi = 3.141592653589793\n    tau = 6.283185307179586\n\nFILE\n    (built-in)\n\n\n\n\n\n\nUsing Modules Function/Objects\n\nFunctions cannot be called as a built-in function:\n\n\nsqrt(9)\n\n\nMust use the module prefix:\n\n\nimport math\nmath.sqrt(9)\nmath.factorial(5)\n\n\nMath Module Functions\n\nmath module allows for common statistical computations\n\n\\[\nf(1;\\mu = 0, \\sigma = 1) = \\frac{1}{\\sqrt{2\\pi}}\\exp^{-\\frac{1}{2}(1 - 0)^2}\n\\]\n\nThis Normal distribution PDF expression can be evaluated using:\n\n\n(1.0/math.sqrt(2*math.pi))*math.exp(-0.5*(1 - 0.0)**2)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html#module-variables",
    "href": "01_Programming_in_python/03-Modules.html#module-variables",
    "title": "Modules",
    "section": "Module Variables",
    "text": "Module Variables\nModules can contain more than functions\n\nmath module also defines variables like e and pi\n\n\nimport math\nmath.e\nmath.pi\nradius = 5\nprint('The area is', math.pi * radius ** 2)\n\nThe area is 78.53981633974483\n\n\n\nYou can overwrite these values (just like built-in objects) but, you know, don’t do that!\n\n\n\nRandom Module\n\nWe’ll deal with random sampling from time to time\n\nrandom module gives functionality to do so (although we’ll use other modules later)\n\n\nimport random\nhelp(random)\n\n\nSet a ‘seed’ for reproducibility and obtain some random observations between 0 and 1\n\nA seed sets a starting point for the ‘random’ number generator. This allows you to get the same ‘random’ numbers the next time you run the code.\n\n\n\nimport random\nrandom.seed(101)\nprint(random.random())\nprint(random.random())\nprint(random.random())\nrandom.seed(101)\nprint(random.random())\n\n0.5811521325045647\n0.1947544955341367\n0.9652511070611112\n0.5811521325045647\n\n\n\nObtain random integers between 10 and 25\n\n\nrandom.sample(range(10, 25), 4)\n\n[13, 18, 15, 17]",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html#importing-as",
    "href": "01_Programming_in_python/03-Modules.html#importing-as",
    "title": "Modules",
    "section": "Importing as",
    "text": "Importing as\n\nCan import with a different name for brevity\n\n\nimport random as ran\nran.seed(101)\nprint(ran.random())\nprint(ran.random())\nprint(ran.random())\n\n0.5811521325045647\n0.1947544955341367\n0.9652511070611112\n\n\n\nObtain random integers between 11 and 26\n\n\nran.sample(range(11, 26), 4)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html#selective-import",
    "href": "01_Programming_in_python/03-Modules.html#selective-import",
    "title": "Modules",
    "section": "Selective Import",
    "text": "Selective Import\n\nCan also selectively import functions and variables from a module\n\n\nfrom math import sqrt, pi\nsqrt(9)\npi\n\n\nOr import everything from a module into the current namespace. Be careful with this as you can overwrite things!\n\n\nfrom math import *\n\n\nIf you intend to use a function often you can assign it to a local name\n\n\nsample = random.random\nsample()",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/03-Modules.html#installing-modules",
    "href": "01_Programming_in_python/03-Modules.html#installing-modules",
    "title": "Modules",
    "section": "Installing Modules",
    "text": "Installing Modules\n\npip is a package manager for python\nUsed through the command line usually\nWe’ll use it through a code cell with ! first\n\nCan see what modules you have\n\npip list\n\nUse pip install module_name to install new modules\n\npip install scipy\n\nColab has most everything we need for now but we’ll need to do some installing later in the course.\n\n! pip list",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Modules"
    ]
  },
  {
    "objectID": "01_Programming_in_python/01-Course_Goals_Landing.html",
    "href": "01_Programming_in_python/01-Course_Goals_Landing.html",
    "title": "Course Goals",
    "section": "",
    "text": "The video below discusses the course goals.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Goals"
    ]
  },
  {
    "objectID": "01_Programming_in_python/01-Course_Goals_Landing.html#notes",
    "href": "01_Programming_in_python/01-Course_Goals_Landing.html#notes",
    "title": "Course Goals",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Goals"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of Big Data",
    "section": "",
    "text": "Welcome to ST 554 - Analysis of Big Data (with python)\nIn this course we’ll look at common issues, analysis, and software used with big data. We’ll discuss the major aspects with the commonly cited ‘5 V’s of Big Data’:\nVolume, Variety, Velocity, Veracity (Variability), and Value\nThe course is split into four topics\nUsing python as our programming language we’ll learn about using Jupyter notebooks to share and document our work. We’ll use pyspark as our interface to the Spark software, which is commonly used to handle big data.",
    "crumbs": [
      "Home",
      "Analysis of Big Data"
    ]
  },
  {
    "objectID": "index.html#course-learning-outcomes",
    "href": "index.html#course-learning-outcomes",
    "title": "Analysis of Big Data",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\nAt the end of this course students will be able to\n\nexplain the steps and purpose of python programs (CO 1)\nefficiently read in, combine, and manipulate data in python (CO 2)\nutilize help and other resources to customize programs (CO 3)\nwrite programs using good programming practices (CO 4)\nexplore, manage, and solve common common problems with big data (CO 5)",
    "crumbs": [
      "Home",
      "Analysis of Big Data"
    ]
  },
  {
    "objectID": "index.html#weekly-to-do-list",
    "href": "index.html#weekly-to-do-list",
    "title": "Analysis of Big Data",
    "section": "Weekly To-do List",
    "text": "Weekly To-do List\nGenerally speaking, each week will have a few videos to watch and readings to do as well as corresponding homework assignments (see the syllabus on Moodle for homework policies).\n\nThere will be two exams and the exam windows (days when you can take the exams) are available on the syllabus and course schedule.\nThere will be three projects, the third of which will count as the final for the course. These will require a reasonably substantial time commitment.",
    "crumbs": [
      "Home",
      "Analysis of Big Data"
    ]
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "Analysis of Big Data",
    "section": "Getting Help!",
    "text": "Getting Help!\nTo obtain course help there are a number of options:\n\nDiscussion Forum on Moodle - This should be used for any question you feel comfortable asking and having others view. The TA, other students, and I will answer questions on this board. This will be the fastest way to receive a response!\n\nE-mail - If there is a question that you don’t feel comfortable asking the whole class you can use e-mail. The TA and I will be checking daily (during the regular work week).\nZoom Office Hour Sessions - These sessions can be used to share screens and have multiple users. You can do text chat, voice, and video. They are great for a class like this!",
    "crumbs": [
      "Home",
      "Analysis of Big Data"
    ]
  },
  {
    "objectID": "index.html#spring-2025-course-schedule",
    "href": "index.html#spring-2025-course-schedule",
    "title": "Analysis of Big Data",
    "section": "Spring 2025 Course Schedule",
    "text": "Spring 2025 Course Schedule\n\n\n\n\n\n\n\n\nTopic/Week\nLearning Materials\nAssignments\n\n\n\n\nWeek 1\n1/6-1/10\nRead - Week 1 Overview\n01 - Course Goals\n02 - Basic Use of Python\n03 - Modules\n04 - JupyterLab Notebooks & Markdown\n05 - List Basics and Strings\n06 - Numeric Types and Booleans\n07 - Common Uses for Data\nHW 1 due W, 1/15\n\n\nWeek 2\n1/13-1/17\n08 - User Defined Functions\n09 - Control Flow\n10 - Lists and Tuples\n11 - Dictionaries\n12 - Numpy\n13 - Exploratory Data Analysis Concepts\nHW 2 due W, 1/22\n\n\nWeek 3\n1/21-1/24 (Off M)\n14 - Pandas Series\n15 - Pandas DataFrames\n16 - Pandas for Reading Data\n17 - Numeric Summaries\nHW 3 due W, 1/29\n\n\nWeek 4\n1/27-1/31\n18 - More Function Writing\n19 - Plotting with Matplotlib\n20 - Plotting with pandas\n21 - Error Handling\nHW 4 due W, 2/5\n\n\nWeek 5\n2/3-2/7\n22 - Big Recap!\n23 - Fitting and Evaluating SLR Models\n24 - Prediction and Training/Test Set Ideas\n25 - Cross-Validation\n26 - Multiple Linear Regression\n27 - LASSO\nExam 1 Th/F 2/6-2/7 - covers weeks 1-4\nProject 1 due W, 2/19\n\n\nWeek 6\n2/10-2/14 (Off T)\nNo new material. Project work time!\n\n\n\nWeek 7\n2/17-2/21\n28 - Big Data Concepts\n29 - Bias and Other Issues with Big Data\n30 - SQL Basics\n31 - SQL Joins\n32 - SQL Readings\nHW 5 due W, 2/26\n\n\nWeek 8\n2/24-2/28\n33 - Data Flow, Data Warehouses, and Data Lakes\n34 - HDFS\nHW 6 due W, 3/5\n\n\nWeek 9\n3/3-3/7\n35 - Connecting to our JupyterHub Environment\n35 - Spark for Dealing with Big Data\n36 - pyspark: RDDs\n37 - pyspark: pandas-on-Spark\n38 - pyspark: Spark SQL\nProject 2 due W, 3/19\n\n\nWeek 10\n3/10-3/14\nNo new material - spring break\n\n\n\nWeek 11\n3/17-3/21\n39 - Modeling Recap\n40 - Modeling Example\n41 - Logistic Regression Basics\n42 - Logistic Regression Extensions\n43 - Regularized Regression\nHW 7 due W, 3/26\n\n\nWeek 12\n3/24-3/28\n44 - Loss Functions & Model Performance\n45 - Classification & Regression Trees\n46 - Bagging Trees & Random Forests\nHW 8 due W, 4/2\n\n\nWeek 13\n3/31-4/4\n47 - Spark MLlib Basics\n48 - Model Pipelines in MLlib\n49 - MLflow\n50 - MLOps\nHW 9 due W, 4/9\n\n\nWeek 14\n4/7-4/11\n51 - Streaming Data Concepts\n52 - Basic Summaries on Streaming Data\n53 - Preprocessing, Sending Alerts, & Combining Streams\nExam 2 Th/F 4/10-4/11 - covers weeks 1-13\n(emphasis on 5-13)\n\n\nWeek 15\n4/14-4/18\n54 - Spark Structured Streaming\n55 - Reading & Writing Streams with Spark Structured Streaming\n56 - Transformations, Windowing, & Aggregations\n57 - Streaming Joins\nFinal Project due M, 4/28\n\n\nWeek 16\n4/21-4/22\nNo new material.",
    "crumbs": [
      "Home",
      "Analysis of Big Data"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html",
    "title": "Basic Use of Python",
    "section": "",
    "text": "Justin Post (Some notes modified from Dr. Eric Chi)\nIn preparation for dealing with big data we need to learn a programming language and figure out a good coding environment. We’ll learn python and code in Google Colab/JupyterLab.\nWe choose python due to its popularity and the ease of programming in spark through pyspark.\nWe use JupyterLab as it is a widely used software for creating python notebooks. Google Colab is built on JupyterLab!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#getting-started",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#getting-started",
    "title": "Basic Use of Python",
    "section": "Getting Started",
    "text": "Getting Started\nWhen you open a new notebook in colab by default it will use python to run any ‘code cells’ (this can be changed in the ‘notebook settings’ under the View -&gt; ‘Notebook info’ menu).\nThere are two types of cells: - Code cells: allow you to submit code - Text cells: allow you to write text using ‘markdown’ (we’ll learn more about that shortly!)\nThese can be added in the top left of the notebook (+ Code and + Text). Below is a python code cell. These can be run by clicking ‘shift-enter’ when in the cell.\n\n#A comment - this text is not evaluated\n5 + 6\n10 * 2\n5**2\n\n25\n\n\n\nOnly the last bit of code is ‘printed’ unless you specifically print it. We’ll do this much of the time with print() function.\n\n\n# % is mod, // is floor\nprint(10 / 3)\nprint(10 % 3)\nprint(10 // 3)\n\n3.3333333333333335\n1\n3\n\n\n\nOperators are applied left to right, except for exponentiation\n\n\n3 + 4 - 5\n\n2\n\n\n\n(3 + 4) - 5\n\n2\n\n\n\n3**2**4\n\n43046721\n\n\n\n#interpreted this way\n3**(2**4)\n\n43046721\n\n\n\n#not this\n(3**2)**4\n\n6561",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#creating-variables",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#creating-variables",
    "title": "Basic Use of Python",
    "section": "Creating Variables",
    "text": "Creating Variables\nYou can assign variables to reference an object using =\n\nx = \"Hello! \"\ny = 'How are you?'\nprint(x)\nprint(x + y)\n\nHello! \nHello! How are you?\n\n\n\nStrings are automatically concatenated using the + operator. As with most programming languages, there are special characters like \\ which indicate something. For instance, \\n is a line break. These appear differently depending on if you print something or just view the object.\n\n\nx = \"Hello! \\n\"\ny = 'Then I asked, \"How are you?\"'\nx\n\n'Hello! \\n'\n\n\n\nprint(x)\n\nHello! \n\n\n\n\nx + y\n\n'Hello! \\nThen I asked, \"How are you?\"'\n\n\n\nprint(x + y)\n\nHello! \nThen I asked, \"How are you?\"\n\n\n\nVariables can be used to simplify and generalize your code\n\n\ndegrees_celsius = 26.0\nprint(9 / 5 * degrees_celsius + 32)\ndegrees_celsius = 100\nprint(9 / 5 * degrees_celsius + 32)\n\n78.80000000000001\n212.0",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#object-types",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#object-types",
    "title": "Basic Use of Python",
    "section": "Object Types",
    "text": "Object Types\nThere are a number of built-in objects you can create. Some important ones are listed below:\n\nText Type: str\n\n\ny = \"text string\"\ntype(y)\n\n\nNumeric Types: int, float\n\n\ny = 10\ntype(y)\nx = 10.4\ntype(x)\n\n\nBoolean Type: bool\n\n\ny = True\ntype(y)\n\n\nSequence Types: list, tuple\n\n\nz = [10, \"a\", 11.5, True]\ntype(z)\n\n\nMapping Type: dict\n\n\nw = {\"key1\": \"value1\",\n     \"key2\": [\"value2\", 10]}\ntype(w)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#multiple-assignment",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#multiple-assignment",
    "title": "Basic Use of Python",
    "section": "Multiple Assignment",
    "text": "Multiple Assignment\n\nAssigning multiple variables on one line is easy\n\n\nx, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)\n\n\nx = y = z = \"Orange\"\nprint(x)\nprint(y)\n\nThe use of * can allow you to ‘pack’ the remaining values into one object. Placement of the * is important here!\n\nx, *y = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\ntype(y)\n\nOrange\n['Banana', 'Cherry']\n\n\nlist\n\n\n\n*x, y = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\n\n['Orange', 'Banana']\nCherry",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#variable",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#variable",
    "title": "Basic Use of Python",
    "section": "_ Variable",
    "text": "_ Variable\nWhen doing python interactively (as with a JupyterLab notebook), the last evaluated expression is assigned to the variable _. This carries across code cells.\n\nx, y, z = \"Orange\", \"Banana\", \"Cherry\"\nx\n\n'Orange'\n\n\n\n_\n\n'Orange'\n\n\n\nx\n\n'Orange'\n\n\n\n#print doesn't count toward the _!\nprint(y)\n\nBanana\n\n\n\n_\n\n'Orange'\n\n\n\ny\n\n'Banana'\n\n\n\n_\n\n'Banana'\n\n\nWe’ll use this _ operator when doing computations where we don’t need to save things. For instance,\n\ndegrees_celcius = 100\n(9 / 5) * degrees_celcius + 32\n\n\n_ - 10\n\n\n(9 / 5) * degrees_celcius + 32 - 10\n\n\n_ * 10\n\n\nsum_numbers = 0\n#no need to create a variable for the index\nfor _ in range(1,101):\n  sum_numbers += _\nsum_numbers\n\n5050",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#copying-vs-referencing",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#copying-vs-referencing",
    "title": "Basic Use of Python",
    "section": "Copying vs Referencing",
    "text": "Copying vs Referencing\nCareful when modifying elements of a compound object: ‘assignment statements do not copy objects, they create bindings between a target (a spot in computer memory) and an object’!\nIf you come from R, this is a very different behavior!\n\n#Changing the original modifies both variables\nx = [1, 2, 3, \"Cats Rule!\"] #create a 'list' of four values\ny = x                       #Make y an alias for x (reference the same memory)\nprint(x, y)\n\n[1, 2, 3, 'Cats Rule!'] [1, 2, 3, 'Cats Rule!']\n\n\n\nx[3] = \"Dogs rule!\" #note that this modifies y!\nprint(x, y)\n\n[1, 2, 3, 'Dogs rule!'] [1, 2, 3, 'Dogs rule!']\n\n\n\nIf you want to avoid this behavior, you can create a copy of the object instead of a reference\n\n\n#Can create a (shallow) copy of the object rather than point to the same object in memory\ny = x.copy()\nx[2] = 10\nx[3]= \"No cats rule!\"\nprint(x, y)\n\n[1, 2, 10, 'No cats rule!'] [1, 2, 3, 'Cats Rule!']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#variable-names",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#variable-names",
    "title": "Basic Use of Python",
    "section": "Variable Names",
    "text": "Variable Names\nVariable names can use letters, digits, and the underscore symbol (but cannot start with a digit)\nOk variable names:\n\nX, species5618, and degrees_celsius\n\nBad variable names:\n\n777 (begins with a digit)\nno-way! (includes punctuation)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#augmented-assignment",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#augmented-assignment",
    "title": "Basic Use of Python",
    "section": "Augmented Assignment",
    "text": "Augmented Assignment\nPython has lots of shorthand notation!\n\nQuite often we want to take a value, add to it, and replace the old value\n\n\nwinnings = 100\nwinnings = winnings + 20\nwinnings\n\n120\n\n\n\n‘Augmented assignment’ gives a shorthand\n\n\nwinnings = 100\nwinnings += 20\nwinnings\n\n120\n\n\n\nThis works for all operators except negation\n\n\nwinnings\nwinnings -= 30\nwinnings\n\n\nwinnings *= 40\nwinnings\n\n\nwinnings **= 1/2\nwinnings\n\n\nAugmented Assignment Execution\nExecuted in the following way:\n\nEvaluate the expression on the right of the = sign to produce a value\nApply the operator to the variable on the left and the value produced\nStore this new value in the memory address of the variable on the left of the =.\n\nThis means the operator is applied after the expression on the right is evaluated.\n\nwinnings = 100\nwinnings += 100*10\nwinnings",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#continuing-a-line-of-code",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#continuing-a-line-of-code",
    "title": "Basic Use of Python",
    "section": "Continuing a Line of Code",
    "text": "Continuing a Line of Code\n\nFor long lines of code, we can break the code across multiple lines using \\ or by wrapping the code in ()\n\n\n10 + 20 - 100 * 60 \\\n/ 20\n\n-270.0\n\n\n\n(10 + 20 - 100 * 60\n/20)\n\n-270.0",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#functions-methods",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#functions-methods",
    "title": "Basic Use of Python",
    "section": "Functions & Methods",
    "text": "Functions & Methods\nTwo major ways to do an operation on a variable/object:\n\nFunctions: function_name(myvar, other_args)\nMethods: myvar.method(other_args)\n\n\nmyList = [1, 10, 100, 1000]\n#len function\nlen(myList)\n\n4\n\n\n\n#max function\nmax(myList)\n\n1000\n\n\n\n#pop method\nmyList.pop(3)\n\n1000\n\n\n\nmyList\n\n[1, 10, 100]\n\n\n\nmyList.append(100000)\nmyList\n\n[1, 10, 100, 100000]",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/02-Basic_Use_Of_Python.html#video-demo",
    "href": "01_Programming_in_python/02-Basic_Use_Of_Python.html#video-demo",
    "title": "Basic Use of Python",
    "section": "Video Demo",
    "text": "Video Demo\nThis quick video shows how to open a new Google Colab notebook and run some basic python code. I’d pop the video out into the panopto player using the arrow icon in the bottom right.\n\nfrom IPython.display import IFrame\nIFrame(src = 'https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=bae161a8-bac0-4c44-a7a1-b0ef0163e90d&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all', width = '620', height = '380')",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Basic Use of Python"
    ]
  },
  {
    "objectID": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#what-is-markdown",
    "href": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#what-is-markdown",
    "title": "Markdown Capabilities",
    "section": "What is Markdown?",
    "text": "What is Markdown?\n\nMost have heard of HTML (HyperText Mark-up Language)\n\nWrite plain text that the browser interprets and renders\n\nMarkdown is a specific ‘mark-up’ language\n\nEasier syntax\n\nNot as powerful\n\nCan be used in ‘Text’ cells\nDouble click a text cell to see the plain text formatting used!\nShift enter to make the cell ‘render’",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Markdown Capabilities"
    ]
  },
  {
    "objectID": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#markdown-syntax",
    "href": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#markdown-syntax",
    "title": "Markdown Capabilities",
    "section": "Markdown Syntax",
    "text": "Markdown Syntax\n\nGeneral link: [link](URL or relative link)\n\nMarkdown Reference from Jupyter\n\n*italics* and _italics_\n**bold** and __bold__\n~~strikethrough~~ becomes strikethrough\n\n\n\n--- Three dashes for a thematic break\n# Level 1 Header, ## Level 2 Header, to six levels\nUse of headers can automatically creates a Table of Contents!\n\nSee top left icon on Colab\n\nInclude an image: ![](path/to/file.png)\n\n\n\nSurround text with a backtick to make ‘code font’",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Markdown Capabilities"
    ]
  },
  {
    "objectID": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#widgets-and-such",
    "href": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#widgets-and-such",
    "title": "Markdown Capabilities",
    "section": "Widgets and Such",
    "text": "Widgets and Such\nWidget Info\n\nLots of fun widgets that you can add\n\nMaps\nSliders\nText input\n\nCheck boxes\nEtc.\n\nThings won’t always work quite right in Colab but will when we move to JupyterLab!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Markdown Capabilities"
    ]
  },
  {
    "objectID": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#video-demo",
    "href": "01_Programming_in_python/04-JupyterLab_Notebooks_Markdown.html#video-demo",
    "title": "Markdown Capabilities",
    "section": "Video Demo",
    "text": "Video Demo\nThis quick video demo shows how we can include some interactive HTML content in our Colab notebook.\n\nrom IPython.display import IFrame\nIFrame(src = 'https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=32a49a33-bc92-49ab-b767-b0ef0167e1b3&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all', width = '720', height = '405')",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Markdown Capabilities"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "",
    "text": "Justin Post\nNext up, we look at two basic built-in data types: numeric types and booleans\nAs with lists and strings, we’ll go through and look at how to create them, common methods and functions, and look at some examples along the way.\nOnce we’re through this part, we’re ready to start thinking about compound data types (other than lists) and how we might store and summarize data. For dealing wtih data, we’ll look at two common python modules and their data types:",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html#ints-floats",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html#ints-floats",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "Ints & Floats",
    "text": "Ints & Floats\n\n(Real) Numbers stored as int or float\n\nPython generally figures out which to use\n\n\n\nx = 10\ntype(x)\n\nint\n\n\n\ny = 10.4\ntype(y)\n\nfloat\n\n\n\nz = y - 0.4\nprint(z)\ntype(z)\n\n10.0\n\n\nfloat\n\n\n\nYou can cast things (or explicitly coerce them) using int() and float()\n\n\nx = 10\nprint(type(x))\nx\n\n&lt;class 'int'&gt;\n\n\n10\n\n\n\nx = float(x)\nprint(type(x))\nx\n\n&lt;class 'float'&gt;\n\n\n10.0\n\n\n\nint(10.5)\n\n10",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html#functions-operators",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html#functions-operators",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "Functions & Operators",
    "text": "Functions & Operators\n\nWe have all the numeric operators discussed previously and a few handy functions built in\n\n\n#floor\n100 // 3\n\n33\n\n\n\n#modulus\n100 % 3\n\n1\n\n\n\n#floor and modulus\ndivmod(100, 3) #returns a 'tuple' (a sort of immutable list)\n\n(33, 1)\n\n\n\n#raise to a power 4^3\npow(4, 3)\n\n64\n\n\n\n#equivalent to\n4 ** 3\n\n64\n\n\n\nabs(-100)\n\n100\n\n\n\nround(10.4242, 2)\n\n10.42\n\n\n\nmath module\n\nmath module has a number of useful functions\nRecall we can import the math module to gain access to its functions. We then preface functions/objects from the module with math.\n\n\nx = 10.55\n#a boolean function (more on this shortly)\nx.is_integer()\n\nFalse\n\n\n\nimport math\nmath.floor(x)\n\n10\n\n\n\nmath.ceil(x)\n\n11\n\n\n\nmath.factorial(10)\n\n3628800",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html#things-to-be-aware-of",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html#things-to-be-aware-of",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "Things To Be Aware Of",
    "text": "Things To Be Aware Of\nFloats are not stored precisely!\n\n1.2-1.0\n\n0.19999999999999996\n\n\n\nComes from binary representation of floats\nNot worth getting into, but if you see something weird like this, that is why!\nMore info here",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html#things-to-noteremember",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html#things-to-noteremember",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "Things to Note/Remember",
    "text": "Things to Note/Remember\n\nAugmented assignment operators\n\n\nx = 100\nx += 200\nx\n\n300\n\n\n\nMultiple assignment\n\n\nx = y = z = 40\nprint(x, y)\n\n40 40\n\n\n\nx, y, z = 40, 50, 60\nprint(x, y)\n\n40 50",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html#more-formatting-strings",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html#more-formatting-strings",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "More Formatting Strings",
    "text": "More Formatting Strings\n\nCan format strings with numbers inserted as well\n\n\nJob = \"Professor\"\nYears = 10.23\n\"I am a {job} and I've been teaching for {years:d} years\".format(job = Job, years = int(Years))\n\"I am a {job} and I've been teaching for {years:f} years\".format(job = Job, years = Years)\n\"I am a {job} and I've been teaching for {years:.1f} years\".format(job = Job, years = Years)\n\n–\n\nd - Integers\nf - Floating point numbers\n.f - Floating point numbers with a fixed amount of digits to the right of the dot.\n\nActually four different ways to substitute into a string (if you are interested!)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html#booleaninteger-relationship",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html#booleaninteger-relationship",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "Boolean/Integer Relationship",
    "text": "Boolean/Integer Relationship\n\nBooleans are a subtype of integers\n\nTrue treated as 1\nFalse treated as 0\n\n\n\nprint(3 + True, 3 * False)\n\n4 0\n\n\n\n#main thing that differs is when coercing to a string\nprint(str(True), str(False), str(True + 0))\n\nTrue False 1",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/06-Numeric_Types_Booleans.html#video-demo",
    "href": "01_Programming_in_python/06-Numeric_Types_Booleans.html#video-demo",
    "title": "Numeric Types (Int and Float) & Booleans",
    "section": "Video Demo",
    "text": "Video Demo\nThis quick video shows some useful functions from the .math module for dealing with integers, floats, and booleans.\n\nfrom IPython.display import IFrame\nIFrame(src=\"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=d59f4288-1a98-446e-a82f-b0f0013e8445&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Numeric Types (Int and Float) & Booleans"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#function-creation-syntax",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#function-creation-syntax",
    "title": "Course Plan",
    "section": "Function Creation Syntax",
    "text": "Function Creation Syntax\n\nTo create our own functions, we just need to use the keyword def, give a function name with arguments, and then tab in (four spaces) our document body.\n\ndef function_name(arg1, arg2, arg3 = default_arg3):\n    \"\"\"\n    Documentation string\n    \"\"\"\n    Function body\n    return object\nGood programming practices indicates we should use a ‘doc-string’ to describe the purpose of the function directly after the function definition. This is usually done with a multi-line comment via triple quotes.",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#write-our-own-mean-function",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#write-our-own-mean-function",
    "title": "Course Plan",
    "section": "Write Our Own Mean Function",
    "text": "Write Our Own Mean Function\nWe discussed common tasks for data. Of course one was simply describing a data set that we have. One way to describe the center of a variable’s distribution is through the sample mean.\n\nGiven data points labeled as \\(y_1, y_2, ..., y_n\\) (\\(n\\) is the number of observations), the sample mean is\n\n\\[\\bar{y}=\\frac{1}{n}\\sum_{i=1}^{n}y_i\\]\nLet’s write a function to calculate the mean of a list of numbers using the sum() and len() functions.\n\ndef find_mean(y):\n    \"\"\"\n    Quick function to find the mean\n    Assumes we have a list with only numeric type data\n    \"\"\"\n    return sum(y)/len(y)\n\nNow let’s apply our function to a list of numeric values. We can create a sequence of values using the range() function. This function takes two arguments, the starting point and the ending point (which isn’t included).\nrange() itself is a immutable iterable type object. It isn’t the values themselves but an object that can be used to create the values. In the case of range() it can be described as a lazy list.\nOne way to get the range() object to create its values is by running list() on it. This tells python to iterate over the range() object and produce the numbers.\n\nseq = range(0,11) #same as range(11)\nseq #doesn't show values\n\nrange(0, 11)\n\n\n\nlist(seq)\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\nfind_mean(list(seq))\n\n5.0\n\n\nIterators (and iterator type objects) are often used to save memory as you often don’t need the entire sequence, but do want to use them in some kind of order.",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#add-argument-with-default",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#add-argument-with-default",
    "title": "Course Plan",
    "section": "Add Argument with Default",
    "text": "Add Argument with Default\nOften we want to give default arguments to our function. That is, arguments that are used unless the user specifies something else.\n\nSuppose we want to add in a trimmed mean functionality\nThis is a mean where we first remove the smallest p% of values and the largest p% of values. We then take the mean of the remaining numbers.\nA trimmed mean is more robust to outliers. For instance,\n\n\nfind_mean([1,2,3,4,5,100]) #the mean is greatly affected by the large value\n\n19.166666666666668\n\n\n\nfind_mean([1,2,3,4,5]) #remove the large value to get a better idea about 'most' of the data values\n\n3.0\n\n\nTo create a trimmed mean function (or option at least), we need to do the following:\n\nSort the observations\nRemove the lowest p% and highest p%\nFind mean on the remaining values\n\n\n#can pull in the floor and sqrt functions from math to help us out\nfrom math import floor, sqrt\n#generate 50 random values from the standard normal distribution\nimport numpy as np\ny = np.random.default_rng(1).standard_normal(50)\n#convert to a list just so we are working with an object we've studied\ny = list(y)\ny[0:10]\n\n[0.345584192064786,\n 0.8216181435011584,\n 0.33043707618338714,\n -1.303157231604361,\n 0.9053558666731177,\n 0.4463745723640113,\n -0.5369532353602852,\n 0.5811181041963531,\n 0.36457239618607573,\n 0.294132496655526]\n\n\nNote that lists have a .sort() method but this modifies the list in place. Instead we can use the sorted() function which returns a new sorted version of the list.\n\nsort_y = sorted(y)\nprint(sort_y[0:10])\nprint(y[0:10])\n\n[-2.7111624789659685, -1.8890132459676727, -1.6480751708556527, -1.303157231604361, -1.2273520542445742, -1.1120207626922813, -0.9447516230607774, -0.7819084623568421, -0.7364540870016669, -0.6832266617805622]\n[0.345584192064786, 0.8216181435011584, 0.33043707618338714, -1.303157231604361, 0.9053558666731177, 0.4463745723640113, -0.5369532353602852, 0.5811181041963531, 0.36457239618607573, 0.294132496655526]\n\n\nNow, given a value of p, we can remove the lowest and high p% of values. We can do this with the floor() function. This gives us the largest interger below a given value.\n\nprint(floor(4))\nprint(floor(4.2))\nprint(floor(4.9))\n\n4\n4\n4\n\n\nGiven a p (for proportion) we can determine the number of observations corresponding to that proportion using the length of y.\n\np = 0.11\nprint(p*len(sort_y))\nto_remove = floor(p*len(sort_y))\nto_remove\n\n5.5\n\n\n5\n\n\nWe can remove observations by simply subsetting our list using the : operator we studied. Remember that this operator doesn’t include the last value. (i.e. 2:5 gives 2, 3, 4)\n\nprint([to_remove, len(sort_y)-to_remove])#values we want to keep are between these\n#remember, counting starts at 0\n#we want the remove the first 5 values so we should start with the 5th index (the 6th actual value!)\n#with a length 50 list, we want to remove the 46-50th elements which correspond to the 45-49 indices\n#since we don't include our last index, we can end on 45\nsort_y[to_remove:(len(sort_y)-to_remove)]\n\n[5, 45]\n\n\n[-1.1120207626922813,\n -0.9447516230607774,\n -0.7819084623568421,\n -0.7364540870016669,\n -0.6832266617805622,\n -0.5369532353602852,\n -0.5140063716874629,\n -0.5062916583143148,\n -0.48211931267997826,\n -0.42219041157635356,\n -0.37760500712699807,\n -0.2924567509650886,\n -0.2756029052993704,\n -0.2571922406188707,\n -0.17477209205516195,\n -0.16290994799305278,\n -0.09826996785221727,\n -0.07204367972722743,\n 0.008142180518343508,\n 0.02842224131579679,\n 0.03558623705548571,\n 0.03972210748165899,\n 0.09548302746945433,\n 0.10901408782154753,\n 0.16746474422274113,\n 0.2136429974986111,\n 0.21732193102256359,\n 0.294132496655526,\n 0.33043707618338714,\n 0.345584192064786,\n 0.36457239618607573,\n 0.4463745723640113,\n 0.5467129866124469,\n 0.5811181041963531,\n 0.5937480717858228,\n 0.5988462126346276,\n 0.6467029962018469,\n 0.6630633723762617,\n 0.8216181435011584,\n 0.8911669542823284]\n\n\n\nModify the function arguments\nNow that we have the process down (this is a good way to write functions by the way, write them outside of a function first and then put the pieces into the function), we can add our arguments/calculations.\nWe’ll add a - method = argument with a default value of None. None is a special name that defines no value. + If this argument takes on Trim, we’ll do a trimmed mean. + This can be done using if Boolean: with the resulting code to execute tabbed in four spaces - a p = argument to specify the proportion to remove with a default value set to 0.\n\ndef find_mean(y, method = None, p = 0):\n    \"\"\"\n    Quick function to find the mean\n    Assumes we have a list with only numeric type data\n    If method is set to Trim, will remove outer most p values off the data\n    before finding the mean\n    \"\"\"\n    if method == \"Trim\": #we'll cover if shortly! The indented code only runs if this condition is met\n      sort_y = sorted(y)\n      to_remove = floor(p*len(sort_y))\n      y = sort_y[to_remove:(len(sort_y)-to_remove)] #replace y with the modified version\n    return sum(y)/len(y)\n\nLet’s test the function!\n\nfind_mean(y, method = \"Trim\", p = 0) #usual mean\n\n-0.03607807742830818\n\n\n\nfind_mean(y, method = \"Trim\", p = 0.05) #5% trimmed mean\n\n-0.029659532804894563\n\n\n\nfind_mean(y, method = \"trim\", p = 0.05) #mean not trimmed if method not set correctly\n\n-0.03607807742830817",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#positional-vs-named-arguments",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#positional-vs-named-arguments",
    "title": "Course Plan",
    "section": "Positional vs Named Arguments",
    "text": "Positional vs Named Arguments\n\nA function can be called using positional or named args\n\n\n#def find_mean(y, method = None, p = 0):\nprint(find_mean(y, None))\nprint(find_mean(method = \"Trim\", p = 0.1, y = y))\nprint(find_mean(y, \"Trim\", 0.1))\n\n-0.03607807742830817\n-0.009797451217442077\n-0.009797451217442077\n\n\n\nYou can’t place positional args after a keyword though!\n\n\nfind_mean(y = x, \"Trim\")\n\nSyntaxError: positional argument follows keyword argument (&lt;ipython-input-119-39dc4eceb262&gt;, line 1)",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#defining-the-type-of-argument",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#defining-the-type-of-argument",
    "title": "Course Plan",
    "section": "Defining the Type of Argument",
    "text": "Defining the Type of Argument\n\nA function definition may look like:\n\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n           -----------    ----------     ----------\n           |              |                  |\n           |         Positional or keyword   |\n           |                                 - Keyword only\n           -- Positional only\n\ndef print_it(x, y, /):\n    print(\"Must pass x and y positionally!\" + x + y)\n\ndef print_it(x, /, y):\n    print(\"x must be passed positionally.  y can be positional or named\" + x + y)\n\ndef print_it(x, /, y, *, z):\n    print(\"Now z must be passed as a named argument\" + x + y + z)\n\nLet’s modify our mean function and show this.\n\n#with this, y must be passes positionally!\ndef find_mean(y, /, method = None, p = 0):\n    \"\"\"\n    Quick function to find the mean\n    Assumes we have a list with only numeric type data\n    If method is set to Trim, will remove outer most p values off the data\n    before finding the mean\n    \"\"\"\n    if method == \"Trim\": #we'll cover if shortly! The indented code only runs if this condition is met\n      sort_y = sorted(y)\n      to_remove = floor(p*len(sort_y))\n      y = sort_y[to_remove:(len(sort_y)-to_remove)] #replace y with the modified version\n    return sum(y)/len(y)\n\n\nfind_mean(y, \"Trim\", p = 0.1)\n\n-0.009797451217442077\n\n\n\nfind_mean(y = y, method = \"Trim\", p = 0.1) #this won't work!\n\nTypeError: find_mean() got some positional-only arguments passed as keyword arguments: 'y'",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#write-our-own-correlation-function",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#write-our-own-correlation-function",
    "title": "Course Plan",
    "section": "Write Our Own Correlation Function",
    "text": "Write Our Own Correlation Function\nJust to demonstrate something more complicated, let’s write our own function to compute the (usual) sample correlation between two variables, call them x and y.\n\nPearson’s correlation:\n\n\\[r = \\frac{\\sum_{i=1}^{n}(x_i-\\bar{x})(y_i-\\bar{y})}{\\sqrt{\\sum_{i=1}^n(x_i-\\bar{x})^2\\sum_{i=1}^{n}(y_i-\\bar{y})^2}}\\]\nwhere - \\((x_i, y_i)\\) are numeric variables observed on the same \\(n\\) units, \\(i=1,...,n\\)\n\nPlan\nFunction inputs: - \\(x\\), \\(y\\), lists with numeric entries only\nFunction body: - Find sample means for \\(x\\) and \\(y\\) - Compute numerator sum and denominator sums - Find quotient and return that value\n\nFinding Means\n\nx = list(range(1,51))\nprint(x[1:10])\nxbar = find_mean(x)\nxbar\n\n[2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n25.5\n\n\n\n#use same y as before\ny = list(np.random.default_rng(1).standard_normal(50))\nprint(y[1:10])\nybar = find_mean(y)\nybar\n\n[0.8216181435011584, 0.33043707618338714, -1.303157231604361, 0.9053558666731177, 0.4463745723640113, -0.5369532353602852, 0.5811181041963531, 0.36457239618607573, 0.294132496655526]\n\n\n-0.03607807742830817\n\n\nThese two vectors are not related and should have a near 0 correlation!\nNext, we need to find the numerator and denominator sums. Finding the sums will be easier once we learn arrays, but for now we’ll peak at a for loop and the zip() function.\nLet’s start with computation of \\[\\sum_{i=1}^n(x_i-\\bar{x})^2\\]\n\n#computation in one of our sums (we want this across all 50 values, then added up)\n(x[0]-xbar)**2\n\n600.25\n\n\nSo really we want to find all of these values:\n(x[0]-xbar)**2\n(x[1]-xbar)**2\n...\n(x[49]-xbar)**2\nWe can use for to iterate over the values of 0, 1, …, 49. Similar to function definitions and if statements, we just tab in (four spaces) the code to be executed at each iteration of the for loop.\n\n#initialize a value to store the sum in\nden_x = 0\n#use a for loop to iterate across values (studies more later!)\nfor i in x:\n    den_x += (i-xbar)**2\nden_x\n\n10412.5\n\n\nWe can very easily get a similar computation for \\(y\\)’s portion of the denominator.\nTo get the numerator, that’s a bit more work. We really need to find\n(x[0]-xbar)(y[0]-ybar)\n(x[1]-xbar)(y[1]-ybar)\n...\n(x[49]-xbar)(y[49]-ybar)\nWe can zip() the \\(x\\) and \\(y\\) lists together. This essentially just pairs the 0th elements, the 1st elements, etc. Then we can iterate over the values together.\n\nnum = 0\nfor i, j in zip(x, y):\n    num += (i-xbar)*(j-ybar)\nnum\n\n-51.69981003655184\n\n\nOk, now we are ready to put these together and calculate our correlation!\n\ndef find_corr(x, y):\n    \"\"\"\n    Compute Pearson's Correlation Coefficient\n    x and y are assumed to be lists with numeric values\n    Data is assumed to have no missing values\n    \"\"\"\n    xbar = find_mean(x)\n    ybar = find_mean(y)\n    num = 0\n    den_x = 0\n    den_y = 0\n    for i, j in zip(x, y):\n        num +=(i-xbar)*(j-ybar)\n        den_x +=(i-xbar)**2\n        den_y +=(j-ybar)**2\n    return num/sqrt(den_x*den_y)\n\nLet’s test our function on our data!\n\nfind_corr(x, y) #near 0!\n\n-0.0813179110596017\n\n\nNote that all functions with a doc string have a .__doc__ attribute that you can look at to understand that function (assuming the doc string is useful!).\n\nprint(find_corr.__doc__)\n\n\n    Compute Pearson's Correlation Coefficient\n    x and y are assumed to be lists with numeric values\n    Data is assumed to have no missing values\n    \n\n\n\nprint(len.__doc__) #another example on a common function\n\nReturn the number of items in a container.\n\n\n\nprint(np.random.default_rng.__doc__) #another example\n\nConstruct a new Generator with the default BitGenerator (PCG64).\n\n    Parameters\n    ----------\n    seed : {None, int, array_like[ints], SeedSequence, BitGenerator, Generator}, optional\n        A seed to initialize the `BitGenerator`. If None, then fresh,\n        unpredictable entropy will be pulled from the OS. If an ``int`` or\n        ``array_like[ints]`` is passed, then it will be passed to\n        `SeedSequence` to derive the initial `BitGenerator` state. One may also\n        pass in a `SeedSequence` instance.\n        Additionally, when passed a `BitGenerator`, it will be wrapped by\n        `Generator`. If passed a `Generator`, it will be returned unaltered.\n\n    Returns\n    -------\n    Generator\n        The initialized generator object.\n\n    Notes\n    -----\n    If ``seed`` is not a `BitGenerator` or a `Generator`, a new `BitGenerator`\n    is instantiated. This function does not manage a default global instance.\n    \n    Examples\n    --------\n    ``default_rng`` is the recommended constructor for the random number class\n    ``Generator``. Here are several ways we can construct a random \n    number generator using ``default_rng`` and the ``Generator`` class. \n    \n    Here we use ``default_rng`` to generate a random float:\n \n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; rng = np.random.default_rng(12345)\n    &gt;&gt;&gt; print(rng)\n    Generator(PCG64)\n    &gt;&gt;&gt; rfloat = rng.random()\n    &gt;&gt;&gt; rfloat\n    0.22733602246716966\n    &gt;&gt;&gt; type(rfloat)\n    &lt;class 'float'&gt;\n     \n    Here we use ``default_rng`` to generate 3 random integers between 0 \n    (inclusive) and 10 (exclusive):\n        \n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; rng = np.random.default_rng(12345)\n    &gt;&gt;&gt; rints = rng.integers(low=0, high=10, size=3)\n    &gt;&gt;&gt; rints\n    array([6, 2, 7])\n    &gt;&gt;&gt; type(rints[0])\n    &lt;class 'numpy.int64'&gt;\n    \n    Here we specify a seed so that we have reproducible results:\n    \n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; rng = np.random.default_rng(seed=42)\n    &gt;&gt;&gt; print(rng)\n    Generator(PCG64)\n    &gt;&gt;&gt; arr1 = rng.random((3, 3))\n    &gt;&gt;&gt; arr1\n    array([[0.77395605, 0.43887844, 0.85859792],\n           [0.69736803, 0.09417735, 0.97562235],\n           [0.7611397 , 0.78606431, 0.12811363]])\n\n    If we exit and restart our Python interpreter, we'll see that we\n    generate the same random numbers again:\n\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; rng = np.random.default_rng(seed=42)\n    &gt;&gt;&gt; arr2 = rng.random((3, 3))\n    &gt;&gt;&gt; arr2\n    array([[0.77395605, 0.43887844, 0.85859792],\n           [0.69736803, 0.09417735, 0.97562235],\n           [0.7611397 , 0.78606431, 0.12811363]])",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#other-things-to-note",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#other-things-to-note",
    "title": "Course Plan",
    "section": "Other Things to Note",
    "text": "Other Things to Note\n\nWhen executing a function, a new symbol table is used for the local variables\nThis keeps us from accidentally overwriting something\n\n\nimport numpy as np\ny = np.array(range(1,11))\n\ndef square(z):\n    y = z**2\n    print(\"In the function environment, z = \" + str(z) + \" and y = \" + str(y))\n    return(y)\n\nprint(square(y))\nprint(y)\n\nIn the function environment, z = [ 1  2  3  4  5  6  7  8  9 10] and y = [  1   4   9  16  25  36  49  64  81 100]\n[  1   4   9  16  25  36  49  64  81 100]\n[ 1  2  3  4  5  6  7  8  9 10]\n\n\n\nprint(z) #z isn't defined outside the function call!\n\nNameError: name 'z' is not defined\n\n\n\nYou can define global variables in a function using global\n\n\ndef square(z):\n    global y\n    y = z**2\n    print(\"In the function environment, z = \" + str(z) + \" and y = \" + str(y))\n    return(y)\n\nprint(square(y))\nprint(y) #modified globally now\n\nIn the function environment, z = [ 1  2  3  4  5  6  7  8  9 10] and y = [  1   4   9  16  25  36  49  64  81 100]\n[  1   4   9  16  25  36  49  64  81 100]\n[  1   4   9  16  25  36  49  64  81 100]\n\n\n\nIf nothing is returned from a function (with return) then it actually returns the special None\n\n\ndef square_it(a):\n    if (type(a) == int) or (type(a) == float):\n      return a**2\n    else:\n      return\n\nprint(square_it(10))\nprint(square_it(10.5))\nprint(square_it(\"10\"))\n\n100\n110.25\nNone\nNone\n\n\n\nDefault values are only evaluated once - at the time of the function definition\nMutable objects can cause an issue! (Lists are mutable as they can be changed, some objects, like tuples, are immutable and can’t be modified.)\n\n\n#append a value to a list but give a default empty list if not given\ndef my_append(value, L = []):\n    L.append(value)\n    return L\n\n#correctly appends \"A\" to the list\nprint(my_append(\"A\"))\n#appends \"B\" to the previous list as L = [] was only evaluated at the time the function was created!\nprint(my_append(\"B\"))\n\n['A']\n['A', 'B']\n\n\n\nTo avoid this behavior, instead define the default value as None and take care of things within the function body\n\n\ndef my_append(value, L = None):\n    if L is None:\n        L = []\n    L.append(value)\n    return L\n\nprint(my_append(\"A\"))\nprint(my_append(\"B\"))\n\n['A']\n['B']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/08-User_Defined_Functions.html#video-demo",
    "href": "01_Programming_in_python/08-User_Defined_Functions.html#video-demo",
    "title": "Course Plan",
    "section": "Video Demo",
    "text": "Video Demo\nThis quick video demo gives another example of creating our own function!\nRemember to pop these out into a panopto window as they are much easier to watch that way!\n\nfrom IPython.display import IFrame\nIFrame(src=\"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=ae1858b3-74cf-4065-8ec7-b0f800e4f827&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Course Plan"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html",
    "href": "01_Programming_in_python/10-Lists_Tuples.html",
    "title": "Lists and Tuples",
    "section": "",
    "text": "Now we’ll look a bit more at lists and introduce tuples - basically an immutable list.\nRecall our plan as we go through our common data types: - Learn how to create - Consider commonly used functions and methods - See control flow and other tricks along the way",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#constructing-a-list",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#constructing-a-list",
    "title": "Lists and Tuples",
    "section": "Constructing a List",
    "text": "Constructing a List\nEarlier we saw there were four ways to construct lists (although we didn’t go through them all) - [element1, element2] - list((element1, element2, ...)) - an empty list and use the append method to add elements - list comprehensions\n\n\nConstructing a list from and empty list\n\nCreate an empty list and use the append method to add elements\n\n\nmylist = []\n# or\nmylist = list()\n\n\nAdd elements with .append()\n\n\nmylist.append(\"Dog\")\nmylist.append(\"Cat\")\nmylist\n\n['Dog', 'Cat']\n\n\n\n\n\nConstructing a List using []\n\nCreate an empty list and use the append method to add elements\nOften used with a for loop\n\n\nanimals = [\"Dog\", \"Cat\", \"Horse\", \"Frog\", \"Cow\", \"Buffalo\", \"Deer\", \"Fish\", \"Bird\", \"Fox\", \"Racoon\"]\nmylist = []\n\nfor x in animals:\n    if \"o\" in x:\n        mylist.append(x)\n\nmylist\n\n['Dog', 'Horse', 'Frog', 'Cow', 'Buffalo', 'Fox', 'Racoon']\n\n\n\n\n\nConstructing a list using list comprehensions\n\nRather than write the loop out, you can use list comprehensions (shorthand!)\nThe general syntax for list comprehensions is:\n[expression for member in iterable]\nLet’s do a quick example. First, the for loop way:\n\n\nanimals = [\"Dog\", \"Cat\", \"Horse\", \"Frog\", \"Cow\", \"Buffalo\", \"Deer\", \"Fish\", \"Bird\", \"Fox\", \"Racoon\"]\nmylist = []\nfor x in animals:\n    mylist.append(x)\n\n\nNow, we can do the same thing with shorthand!\n\n\nmylist = [x for x in animals] #for x in animals, return x (essentially)\nmylist\n\n\nYou can do more complicated things with list comprehensions as well. For instance, we can include condition logic.\n[expression for member in iterable (if conditional)]\nFirst the for loop way:\n\n\nanimals = [\"Dog\", \"Cat\", \"Horse\", \"Frog\", \"Cow\", \"Buffalo\", \"Deer\", \"Fish\", \"Bird\", \"Fox\", \"Racoon\"]\nfor x in animals:\n    if \"o\" in x:\n        mylist.append(x)\n\n\nNow using a list comprehension:\n\n\nmylist = [x for x in animals if \"o\" in x]\nmylist\n\n\nWe can also modify the thing that gets put into the loop. Check out this example where we upper case the string.\nFirst the for loop way:\n\n\nanimals = [\"Dog\", \"Cat\", \"Horse\", \"Frog\", \"Cow\", \"Buffalo\", \"Deer\", \"Fish\", \"Bird\", \"Fox\", \"Racoon\"]\nmylist = []\n\nfor x in animals:\n    if \"o\" in x:\n        mylist.append(x.upper()) #upper case prior to appending\n\nmylist\n\n['DOG', 'HORSE', 'FROG', 'COW', 'BUFFALO', 'FOX', 'RACOON']\n\n\n\nNow using a list comprehension:\n\n\nmylist = [x.upper() for x in animals if \"o\" in x]\nmylist\n\n['DOG', 'HORSE', 'FROG', 'COW', 'BUFFALO', 'FOX', 'RACOON']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#reminder-about-strings",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#reminder-about-strings",
    "title": "Lists and Tuples",
    "section": "Reminder About Strings",
    "text": "Reminder About Strings\n\nStrings are a sequence type object (so you can iterate over them naturally)\n\n\nmylist = []\nfor x in \"Man do I love learning all this python!\":\n    if x in \"aeiou\":\n        mylist.append(x)\nmylist\n\n['a', 'o', 'o', 'e', 'e', 'a', 'i', 'a', 'i', 'o']\n\n\n\nThat means we can do something like the for loop above using list comprehensions!\n\n\nmylist = [x for x in \"Man do I love learning all this python!\" if x in \"aeiou\"]\nmylist\n\n['a', 'o', 'o', 'e', 'e', 'a', 'i', 'a', 'i', 'o']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#list-operations-indexing-slicing",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#list-operations-indexing-slicing",
    "title": "Lists and Tuples",
    "section": "List Operations (Indexing & Slicing)",
    "text": "List Operations (Indexing & Slicing)\nRecall:\n\nIndex with a [] (just like strings)\nCounting starts at 0\n\n\nx = [10, 15, 10, 100, \"Help!\"]\nx[0]\n\n10\n\n\n\nx[1]\n\n15\n\n\n\nx[-1]\n\n'Help!'\n\n\n\nMultiple elements at once with :\nRemember the last number isn’t included and the counting starts at 0\n\n:2 is really giving you 0 and 1\n\n\n\nx[:2]\n\n[10, 15]\n\n\n\nx[1:]\n\n[15, 10, 100, 'Help!']\n\n\n\nx[1:3]\n\n[15, 10]\n\n\n\nx[1:4:2]\n\n[15, 100]",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#lists-are-mutable",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#lists-are-mutable",
    "title": "Lists and Tuples",
    "section": "Lists are Mutable",
    "text": "Lists are Mutable\n\nThat is, we can replace or change elements of a list\n\n\nx = [10, 15, 10, 100, \"Help!\"]\nx[0] = 11\nx\n\n[11, 15, 10, 100, 'Help!']\n\n\n\nx[1] = [\"hi\", \"ho\"]\nx\n\n[11, ['hi', 'ho'], 10, 100, 'Help!']\n\n\n\nx[1:3] = [1, 2]\nx\n\n[11, 1, 2, 100, 'Help!']",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#list-methods",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#list-methods",
    "title": "Lists and Tuples",
    "section": "List Methods",
    "text": "List Methods\nMany useful methods to modify lists:\n\nmylist.append(object_to_add)\n\n\nx = [x for x in range(1,10)]\ny = [y for y in \"abcde\"]\nx.append(y) #modifies x\nx\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, ['a', 'b', 'c', 'd', 'e']]\n\n\n\nmylist.extend(object_to_add)\n\n\nx = [x for x in range(1,10)]\ny = [y for y in \"abcde\"]\nx.extend(y) #modifies x and iterates over list elements rather than appending a list into x\nx\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e']\n\n\n\nUsing + is similar but doesn’t overwrite x\n\n\nx + y\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\n\n\n\nmylist.insert(index, object_to_add)\n\n\ny = [y for y in \"abcde\"]\ny.insert(2, 30) #modifies y\ny\n\n['a', 'b', 30, 'c', 'd', 'e']\n\n\n\nmylist.remove(element_to_remove)\n\n\ny.remove(\"d\") #modifies y\ny\n\n['a', 'b', 30, 'c', 'e']\n\n\n\nmylist.count(value)\n\n\nw = [x for x in range(0, 4)] * 4\nprint(w)\nw.count(1)\n\n[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]\n\n\n4\n\n\n\nmylist.index(value)\n\n\nv = [y for y in \"abcde\"]\nv.extend([\"z\", \"y\"] * 3)\nprint(v)\nprint(v.index(\"y\"))\nprint(v.index(\"y\", v.index(\"y\") + 1))\n\n['a', 'b', 'c', 'd', 'e', 'z', 'y', 'z', 'y', 'z', 'y']\n6\n8\n\n\n\n\nList Packing & Unpacking\n\nWe can pack a list. That is, put a bunch of values in a list in one line of code.\n\n\nanimals = [\"Dog\", \"Cat\", \"Horse\", \"Frog\", \"Cow\", \"Buffalo\", \"Deer\", \"Fish\", \"Bird\", \"Fox\", \"Racoon\"]\nshort_animals = animals[:3]\n\n#pack the values first, second, and third\nfirst, second, third = short_animals\nprint(first + \" \" + second + \" \" + third)\n\nDog Cat Horse\n\n\n\nWe can also pack leftover elements into a list using *name\n\n\nfirst, second, third, *other = animals\nprint(first + \" \" + second + \" \" + third)\nprint(other)\n\nDog Cat Horse\n['Frog', 'Cow', 'Buffalo', 'Deer', 'Fish', 'Bird', 'Fox', 'Racoon']\n\n\n\nYou can pack in different orders as well!\n\n\nanimals = [\"Dog\", \"Cat\", \"Horse\", \"Frog\", \"Cow\", \"Buffalo\", \"Deer\", \"Fish\", \"Bird\", \"Fox\", \"Racoon\"]\n*other, second_last, last = animals\nprint(other)\nprint(second_last + \" \" + last)\n\n['Dog', 'Cat', 'Horse', 'Frog', 'Cow', 'Buffalo', 'Deer', 'Fish', 'Bird']\nFox Racoon\n\n\n\nIf we want to ignore some of the values we can use our _ temporary variable with packing and *:\n\n\nfirst, *_, last = animals\nprint(first + \" \" + last)\n\nDog Racoon\n\n\n\nLater we’ll look at unpacking a list when calling functions\n\n\ndef my_fun(a, b, c):\n    print(a, b, c)\n\nfav_animals = [\"cat\", \"dog\", \"cow\"]\nmy_fun(*fav_animals)\n\ncat dog cow",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#constructing-tuples",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#constructing-tuples",
    "title": "Lists and Tuples",
    "section": "Constructing Tuples",
    "text": "Constructing Tuples\n\nTuples are very similar to lists but aren’t mutable\nWe create by separating elements with a ,, ( ), or tuple(())\n\n\ntup1 = 3, 10, \"word\", True\ntup1\n\n(3, 10, 'word', True)\n\n\n\ntup2 = (1, 2, \"word\", False)\ntup2\n\n(1, 2, 'word', False)\n\n\n\ntup3 = tuple((tup1, tup2))\ntup3\n\n((3, 10, 'word', True), (1, 2, 'word', False))\n\n\n\ntup4 = tup1 + tup2\ntup4\n\n(3, 10, 'word', True, 1, 2, 'word', False)\n\n\n\ntup5 = (1, [1, 3])\ntup5\n\n(1, [1, 3])\n\n\n\ntup5 * 3\n\n(1, [1, 3], 1, [1, 3], 1, [1, 3])\n\n\n\ntup5[1][1] = 5 #can still modify mutable elements\n\n\ntup5\n\n(1, [1, 5])",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#constructing-tuples-from-list-comprehensions",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#constructing-tuples-from-list-comprehensions",
    "title": "Lists and Tuples",
    "section": "Constructing Tuples from list comprehensions",
    "text": "Constructing Tuples from list comprehensions\n\nTo populate a tuple we can wrap a list comprehension with tuple()\n\n\ny = [x for x in range(1, 10)]\ny = tuple(y)\ny\n\n(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n\n\nCan sort of edit a tuple by switching it between a list and a tuple… but this isn’t really editing it!\n\n\ny = list(y)\ny.append(\"new element\")\ny = tuple(y)\ny\n\n(1, 2, 3, 4, 5, 6, 7, 8, 9, 'new element')",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/10-Lists_Tuples.html#tuple-operations-methods",
    "href": "01_Programming_in_python/10-Lists_Tuples.html#tuple-operations-methods",
    "title": "Lists and Tuples",
    "section": "Tuple Operations & Methods",
    "text": "Tuple Operations & Methods\nAs with strings and lists:\n\nWe can index and slice using [:]\nConcatenate with + and *\nSome similar functions like len() and count()\nSome similar methods like .index() and .count()\nCan do packing and unpacking",
    "crumbs": [
      "Home",
      "Learning `python`",
      "Lists and Tuples"
    ]
  },
  {
    "objectID": "01_Programming_in_python/12-Numpy.html#creating-an-array",
    "href": "01_Programming_in_python/12-Numpy.html#creating-an-array",
    "title": "NumPy",
    "section": "Creating an Array",
    "text": "Creating an Array\n\nArrays are like lists but process much faster\nThey also require that the data be of the same type\nThey can be multidimensional (like a matrix or even higher dimension\n\nThe picture below from https://predictivehacks.com/tips-about-numpy-arrays/ shows a 1D, 2D, and 3D array visually.\n\n\nTo create an ndarray object, pass a list, tuple, or any array-like object to np.array()\n\n\na = np.array(1)\na\n\n\ntype(a)\n\n\nndarrays have a shape attribute\nAttributes can be accessed like methods except we don’t use () at the end\nWe did this with the .__doc__ attribute on functions\n\n\na.shape\n\n\nb = np.array([1, 2, 3])\nprint(b)\nprint(type(b))\nprint(b.shape)\n\n\n\nArray Dimension\n\n0D arrays are a scalar (sort of… see here for discussion)\n1D arrays are vectors\n2D arrays are matrices\n3D and up are just called arrays\n.shape attribute returns the dimensions of an array as a tuple\n\n\nc = np.array([1, \"a\", True])\nprint(c)\nc.shape\n\n\nd = np.array([\n  [1, 2, 3],\n  [4, 5, 6]]\n  )\nprint(d)\nd.shape\n\n\n\nFunctions for Fillling/Creating Arrays\nCreating a vector or matrix of all zeros\n\nRow vector\n\n\nA0 = np.zeros(4) #row vector of length 4\nA0\n\n\nColumn vector\n\n\nA0 = np.zeros((4,1)) #column vector of length 4\nA0\n\n\nMatrix of zeros\n\n\nA = np.zeros((4,2)) #matrix with dimension 4, 2, given as a tuple\nA\n\n\nA.shape\n\n\nRow of all ones\n\n\nb = np.ones(4) #row vector\nb\n\n\nMatrix of all ones\n\n\nB = np.ones((2,3))\nB\n\n\nMatrix of 10’s\n\n\nC = np.ones((2, 3)) * 10\nC\n\n\nnp.full() does this automatically\n\n\nC = np.full((2,3), 10) #specify the value to fill with after the tuple giving dimension\nC\n\n\nBe careful! C is an integer valued array\n\n\nC = np.full((2,3), 10)\nC[0,0] = 6.5                 #replace the top left element\nC\n\n\nAvoid by creating the matrix with a float instead\n\n\nC = np.full((2,3), 10.0)  #or C = np.ones((2, 3)) * 10.0\nC[0,0] = 6.5\nC\n\n\nCreate an identity matrix with np.eye() (this has 1’s on the diagonal and 0’s elsewhere)\n\n\nD = np.eye(3)\nD\n\n\nCreate a random matrix (values between 0 and 1) with np.random.random()\n\n\nE = np.random.random((3,5))\nE\n\n\nMany more ways to create!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "`NumPy`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/12-Numpy.html#reshaping-an-array",
    "href": "01_Programming_in_python/12-Numpy.html#reshaping-an-array",
    "title": "NumPy",
    "section": "Reshaping an Array",
    "text": "Reshaping an Array\n\nReshape an array with the .reshape() method\nChanges the dimension in some way\nWe’ll need to do this type of thing when fitting models!\n\n\nF = np.random.random((10,1))\nF\n\n\nF.shape\n\n\nG = F.reshape(1, -1) #-1 flattens to a 1D array\nG\n\n\nG.shape\n\n\nG = F.reshape(2, 5)\nG\n\n\nCareful! This is a view of the original array\nView means that we haven’t created a new array, just a different way of viewing the values (essentially). The data is still stored in the same memory\n.base attribute tells you whether you are referencing another array\n\n\nG.base is None\n\n\nG.base\n\n\n\nCopying an Array\n\nTo avoid getting a view, copy the array with .copy() method\n\n\nH = F.reshape(2, 5).copy()\nH.base is None\n\n\nH.base",
    "crumbs": [
      "Home",
      "Learning `python`",
      "`NumPy`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/12-Numpy.html#indexing-an-array",
    "href": "01_Programming_in_python/12-Numpy.html#indexing-an-array",
    "title": "NumPy",
    "section": "Indexing an Array",
    "text": "Indexing an Array\n\nAccess in the same was as lists []\nWith multiple dimensions, separate the indices you want with a ,\n\n\nb = np.array([1, 2, 3]) #row vector\nb\n\n\nprint(b[0], b[1], b[2])\n\n\nb[0] = 5 #overwrite the 0 element\nb\n\n\nDepending on the dimensions, you add the required commas\nHere we have a 3D array so we have three slots\nNotation: array[1stD, 2ndD, 3rdD]\n\n\nE = np.random.random((3, 2, 2))\nE\n\n\nE[0, 0, 0]\n\n\nE[0, 1, 0]\n\n\nE[1, 0, 1]\n\n\n\nSlicing an Array\n\nRecall [start:end] for slicing sequence type objects. We can do that with arrays as well\n\nReturns everything from start up to and excluding end\nLeaving start blank implies a 0\nLeaving end blank returns everything from start through the end of the array\n\n\n\nA = np.array([\n  [1,2,3,4],\n  [5,6,7,8],\n  [9,10,11,12]])\nA\n\n\nB = A[:2, 1:3]\nB\n\n\nCareful with modifying! We have a view here so the values in both A and B are referencing the same computer memory\nChanging an element of B changes A!\n\n\nB[0, 0] = 919\nA\n\n\nReturning All of One Index\nUse a : with nothing else\n\n\nA = np.array([\n  [1,2,3,4],\n  [5,6,7,8],\n  [9,10,11,12]])\nA1 = A[1, :]\nA1\n\n\nA1.shape\n\n\nA2 = A[1:3, :]\nA2\n\n\nA2.shape",
    "crumbs": [
      "Home",
      "Learning `python`",
      "`NumPy`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/12-Numpy.html#operations-on-arrays",
    "href": "01_Programming_in_python/12-Numpy.html#operations-on-arrays",
    "title": "NumPy",
    "section": "Operations on Arrays",
    "text": "Operations on Arrays\n\nWe saw that multiplying by a constant was performed elementwise\n\nAll basic functions act elementwise\n\n\nx = np.array([\n  [1,2],\n  [3,4]])\ny = np.array([\n  [5,6],\n  [7,8]])\n\nx\n\n\ny\n\n\nx + 10\n\n\nLots of methods exist such as the .add() method for adding arrays elementwise\n\n\nnp.add(x, y)\n\n\nIf we just do something like x * y we get elementwise multiplication\n\n\nx * y\n\n\nThe .multiply() method does elementwise multiplication too\nCan also add in conditions on when to multiply though!\n\nwhere = argument gives the condition on when to do the multiplication\nout = tells it which values to use if you don’t do the multiplication\n\n\n\nnp.multiply(x, y, where = (x &gt;= 3), out = x)\n\n\nElementwise division\n\n\nx / y\n\n\nWe can do matrix multiplication (if you are familiar with that) using the .matmul() method\n\n\nnp.matmul(x, y)\n\n\nsqrt() function can be used to find the square roots of the elements of a matrix\n\n\nnp.sqrt(x)\n\n\nnp.linalg.inv() will provide the inverse of a square matrix (if you’re familiar with that type of thing!)\n\n\nnp.linalg.inv(x)\n\n\nComputations on Arrays\n\nNumPy has some useful functions for performing basic computations on arrays\n\n\nx = np.array([\n  [1,2,10],\n  [3,4,11]])\nnp.sum(x)\n\n\nColumn-wise and row-wise sums\n\n\nx.shape\n\n\nnp.sum(x, axis=0)\n\n\nnp.sum(x, axis=1)\n\n\nCombine arrays (appropriately sized)\n\n\nx = np.array([\n  [1,2],\n  [3,4]])\ny = np.array([\n  [5,6],\n  [7,8]])\n\nnp.hstack((x, y))\n\n\nnp.vstack((x, y))\n\n\nLots of other operations!",
    "crumbs": [
      "Home",
      "Learning `python`",
      "`NumPy`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/14-Pandas_Series.html#creating-a-pandas-series",
    "href": "01_Programming_in_python/14-Pandas_Series.html#creating-a-pandas-series",
    "title": "Pandas Series",
    "section": "Creating a pandas Series",
    "text": "Creating a pandas Series\n\nCreate a series using the pd.Series() function\n\n\nimport numpy as np\nimport pandas as pd\nrng = np.random.default_rng(2) #set a seed\ns = pd.Series(rng.normal(size = 10, loc = 2, scale = 4)) #mean of 2 and std of 4\ns\n\n0    2.756214\n1   -0.090994\n2    0.347746\n3   -7.765870\n4    9.198830\n5    6.576663\n6    0.698309\n7    5.095226\n8    3.124843\n9   -0.215291\ndtype: float64",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas Series"
    ]
  },
  {
    "objectID": "01_Programming_in_python/14-Pandas_Series.html#indexing-a-series",
    "href": "01_Programming_in_python/14-Pandas_Series.html#indexing-a-series",
    "title": "Pandas Series",
    "section": "Indexing a Series",
    "text": "Indexing a Series\n\nThe ordering starts at 0\nLike numpy arrays, all elements in a series must be of the same type\nUnlike numpy arrays, series can be indexed by an index attribute (not just the numeric index)\n.index attribute returns just the indices\n\n\ns.index\n\nRangeIndex(start=0, stop=10, step=1)\n\n\n\ns[0] #is both the numeric index and the value of an index here\n\n2.756213527174132\n\n\n\ns2 = pd.Series(rng.normal(size = 10, loc = 2, scale = 4),\n               index = [x for x in \"abcdefghij\"])\ns2\n\na    5.910270\nb    0.757774\nc    0.684704\nd   -1.168587\ne    3.819832\nf    1.603208\ng    4.181155\nh   -0.428743\ni    2.507311\nj   -1.569096\ndtype: float64\n\n\n\ns2.index\n\nIndex(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], dtype='object')\n\n\nWe can access elements with the numeric index of this index value.\n\ns2[2]\n\n0.6847043837681492\n\n\n\ns2[\"c\"]\n\n0.6847043837681492\n\n\n\nWe can obtain just the values with of a series using the .values attribute\n\n\ns.values\n\narray([ 2.75621353, -0.09099377,  0.34774583, -7.76586953,  9.19882953,\n        6.57666349,  0.69830865,  5.09522635,  3.12484268, -0.21529135])\n\n\n\ns2.values\n\narray([ 5.9102698 ,  0.75777381,  0.68470438, -1.16858702,  3.81983228,\n        1.60320779,  4.18115486, -0.4287428 ,  2.50731139, -1.56909617])\n\n\n\nNote that when you return the values you get back just a numpy array!\n\n\ntype(s2.values)\n\nnumpy.ndarray",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas Series"
    ]
  },
  {
    "objectID": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#data-formats",
    "href": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#data-formats",
    "title": "Pandas for Reading Raw Data",
    "section": "Data Formats",
    "text": "Data Formats\n\n‘Delimited’ data: Character (such as ‘,’ , ‘&gt;’, or [’ ’]) separated data\nFixed field data\nExcel data\nFrom other statistical software, Ex: SPSS formatted data or SAS data sets\nFrom an Application Programming Interface (API) (often returned as a JSON file - key value pairs, similar to a dictionary)\nFrom a database",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas for Reading Raw Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#delimited-data",
    "href": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#delimited-data",
    "title": "Pandas for Reading Raw Data",
    "section": "Delimited Data",
    "text": "Delimited Data\n\nOne common format for raw data is delimited data\n\nData that has a character or characters that separates the data values\nCharacter(s) is (are) called delimiter(s)\n\nUsing pandas the read_csv() function can read in this kind of data (although csv stands for ‘comma separated value’, this function is used for reading most delimited data)\n\nJust need to tell python where to find it!",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas for Reading Raw Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#locating-a-file",
    "href": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#locating-a-file",
    "title": "Pandas for Reading Raw Data",
    "section": "Locating a File",
    "text": "Locating a File\n\nHow does python locate the file?\n\nNot in colab\n\nYou can give file full path name\n\nex: ‘S:/Documents/repos/ST-554/datasets/data.csv’\n\nex: ‘S:\\Documents\\repos\\ST-554\\datasets\\data.csv’\n\n\n\nOr use local paths!\n\nDetermine your working directory\nUse a path relative to that\nIf your working directory is ‘S:/Documents/repos/ST-554’ you can get to ‘data.csv’ via ‘datasets/data.csv’\n\nThe os module gives you access to function for finding and setting your working directory\nIn colab you can\n\nMount your google drive\nRead files from URLs\nUpload files via the menu on the left (folder icon, then upload a file via the icons there)\n\n\n\nimport os\nos.getcwd() #shows the directory you can get to via the folder icon on the left\n#os.chdir(\"S:/Documents/repos/ST-554\") #won't work in colab\n\n'/content'",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas for Reading Raw Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-files-locally-in-colab",
    "href": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-files-locally-in-colab",
    "title": "Pandas for Reading Raw Data",
    "section": "Reading Files ‘Locally’ in Colab",
    "text": "Reading Files ‘Locally’ in Colab\n\nNicely formatted .csv files can be read in with the read_csv() function from pandas\nneuralgia.csv has been loaded into the folder on colab in my session. Therefore, it exists in my working directory (this won’t be the case for you unless you upload the data during your session!)\n\n\nneuralgia_data = pd.read_csv(\"neuralgia.csv\") #neuralgia.csv file was uploaded to colab for my session\nneuralgia_data.head() #this code block won't work unless you upload the data in your session\n\n\n  \n    \n\n\n\n\n\n\nTreatment\nSex\nAge\nDuration\nPain\n\n\n\n\n0\nP\nF\n68\n1\nNo\n\n\n1\nB\nM\n74\n16\nNo\n\n\n2\nP\nF\n67\n30\nNo\n\n\n3\nP\nM\n66\n26\nYes\n\n\n4\nB\nF\n67\n28\nNo\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nneuralgia_data.shape\n\n(60, 5)",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas for Reading Raw Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-from-a-url",
    "href": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-from-a-url",
    "title": "Pandas for Reading Raw Data",
    "section": "Reading From a URL",
    "text": "Reading From a URL\n\nNicely formatted .csv files can be read in with the read_csv() function from pandas\nscoresFull.csv file at a URL given by ‘https://www4.stat.ncsu.edu/~online/datasets/scoresFull.csv’\n\n\nscores_data = pd.read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/scoresFull.csv\")\nscores_data.head()\n\n\n  \n    \n\n\n\n\n\n\nweek\ndate\nday\nseason\nawayTeam\nAQ1\nAQ2\nAQ3\nAQ4\nAOT\n...\nhomeFumLost\nhomeNumPen\nhomePenYds\nhome3rdConv\nhome3rdAtt\nhome4thConv\nhome4thAtt\nhomeTOP\nHminusAScore\nhomeSpread\n\n\n\n\n0\n1\n5-Sep\nThu\n2002\nSan Francisco 49ers\n3\n0\n7\n6\n-1\n...\n0\n10\n80\n4\n8\n0\n1\n32.47\n-3\n-4.0\n\n\n1\n1\n8-Sep\nSun\n2002\nMinnesota Vikings\n3\n17\n0\n3\n-1\n...\n1\n4\n33\n2\n6\n0\n0\n28.48\n4\n4.5\n\n\n2\n1\n8-Sep\nSun\n2002\nNew Orleans Saints\n6\n7\n7\n0\n6\n...\n0\n8\n85\n1\n6\n0\n1\n31.48\n-6\n6.0\n\n\n3\n1\n8-Sep\nSun\n2002\nNew York Jets\n0\n17\n3\n11\n6\n...\n1\n10\n82\n4\n8\n2\n2\n39.13\n-6\n-3.0\n\n\n4\n1\n8-Sep\nSun\n2002\nArizona Cardinals\n10\n3\n3\n7\n-1\n...\n0\n7\n56\n6\n10\n1\n2\n34.40\n8\n6.0\n\n\n\n\n5 rows × 82 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nscores_data.shape\n\n(3471, 82)\n\n\n\nOddly, to read other types of delimited data, we also use read_csv()!\n\nSpecify the sep = argument\n\nchemical.txt file (space delimiter) stored at “https://www4.stat.ncsu.edu/~online/datasets/chemical.txt”\n\n\nchem_data = pd.read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/chemical.txt\", sep=\" \")\nchem_data.info()\n\n\ncrabs.txt file (tab delimiter) stored at “https://www4.stat.ncsu.edu/~online/datasets/crabs.txt”\n\nTab is \\t\n\n\n\ncrabs_data = pd.read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/crabs.txt\", sep=\"\\t\")\ncrabs_data.info()\n\n\numps2012.txt file (&gt; delimiter) stored at “https://www4.stat.ncsu.edu/~online/datasets/umps2012.txt”\n\nNo column names in raw file\nCan specify header = None and give column names when reading (via names = [list of names])\n\n\n\nump_data = pd.read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/umps2012.txt\",\n                      sep=\"&gt;\",\n                      header=None,\n                      names=[\"Year\", \"Month\", \"Day\", \"Home\", \"Away\", \"HPUmpire\"])\nump_data.head()\n\n\n  \n    \n\n\n\n\n\n\nYear\nMonth\nDay\nHome\nAway\nHPUmpire\n\n\n\n\n0\n2012\n4\n12\nMIN\nLAA\nD.J. Reyburn\n\n\n1\n2012\n4\n12\nSD\nARI\nMarty Foster\n\n\n2\n2012\n4\n12\nWSH\nCIN\nMike Everitt\n\n\n3\n2012\n4\n12\nPHI\nMIA\nJeff Nelson\n\n\n4\n2012\n4\n12\nCHC\nMIL\nFieldin Culbreth",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas for Reading Raw Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-excel-data",
    "href": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-excel-data",
    "title": "Pandas for Reading Raw Data",
    "section": "Reading Excel Data",
    "text": "Reading Excel Data\n\nUse the ExcelFile() function from pandas\ncensusEd.xlsx file located at “https://www4.stat.ncsu.edu/~online/datasets/censusEd.xlsx”\n\n\ned_data = pd.ExcelFile(\"https://www4.stat.ncsu.edu/~online/datasets/censusEd.xlsx\")\ned_data\n\n&lt;pandas.io.excel._base.ExcelFile at 0x79ac84d74760&gt;\n\n\n\nDifferent attributes associated with this data frame!\n\n\n#ed_data.head(), ed_data.info() won't work!\ntype(ed_data)\n\npandas.io.excel._base.ExcelFile\n\n\n\ned_data.sheet_names\n\n['EDU01A',\n 'EDU01B',\n 'EDU01C',\n 'EDU01D',\n 'EDU01E',\n 'EDU01F',\n 'EDU01G',\n 'EDU01H',\n 'EDU01I',\n 'EDU01J']\n\n\n\nUse .parse() method with sheet to obtain a usual DataFrame\n\n\ned_data.parse('EDU01A').head()\n\n/usr/local/lib/python3.10/dist-packages/openpyxl/worksheet/header_footer.py:48: UserWarning: Cannot parse header or footer so it will be ignored\n  warn(\"\"\"Cannot parse header or footer so it will be ignored\"\"\")\n\n\n\n  \n    \n\n\n\n\n\n\nArea_name\nSTCOU\nEDU010187F\nEDU010187D\nEDU010187N1\nEDU010187N2\nEDU010188F\nEDU010188D\nEDU010188N1\nEDU010188N2\n...\nEDU010194N1\nEDU010194N2\nEDU010195F\nEDU010195D\nEDU010195N1\nEDU010195N2\nEDU010196F\nEDU010196D\nEDU010196N1\nEDU010196N2\n\n\n\n\n0\nUNITED STATES\n0\n0\n40024299\n0\n0\n0\n39967624\n0\n0\n...\n0\n0\n0\n43993459\n0\n0\n0\n44715737\n0\n0\n\n\n1\nALABAMA\n1000\n0\n733735\n0\n0\n0\n728234\n0\n0\n...\n0\n0\n0\n727989\n0\n0\n0\n736825\n0\n0\n\n\n2\nAutauga, AL\n1001\n0\n6829\n0\n0\n0\n6900\n0\n0\n...\n0\n0\n0\n7568\n0\n0\n0\n7834\n0\n0\n\n\n3\nBaldwin, AL\n1003\n0\n16417\n0\n0\n0\n16465\n0\n0\n...\n0\n0\n0\n19961\n0\n0\n0\n20699\n0\n0\n\n\n4\nBarbour, AL\n1005\n0\n5071\n0\n0\n0\n5098\n0\n0\n...\n0\n0\n0\n5017\n0\n0\n0\n5053\n0\n0\n\n\n\n\n5 rows × 42 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\nAlternatively, use the read_excel() function from pandas\nThis reads things in to a standard DataFrame but you have to specify a sheet to read in (or it defaults to the 1st)\ncensusEd.xlsx file located at “https://www4.stat.ncsu.edu/~online/datasets/censusEd.xlsx”\n\n\ned_data = pd.read_excel(\"https://www4.stat.ncsu.edu/~online/datasets/censusEd.xlsx\",\n                        sheet_name = 0) #or \"EDU01A\"\ned_data.head()\n\n/usr/local/lib/python3.10/dist-packages/openpyxl/worksheet/header_footer.py:48: UserWarning: Cannot parse header or footer so it will be ignored\n  warn(\"\"\"Cannot parse header or footer so it will be ignored\"\"\")\n\n\n\n  \n    \n\n\n\n\n\n\nArea_name\nSTCOU\nEDU010187F\nEDU010187D\nEDU010187N1\nEDU010187N2\nEDU010188F\nEDU010188D\nEDU010188N1\nEDU010188N2\n...\nEDU010194N1\nEDU010194N2\nEDU010195F\nEDU010195D\nEDU010195N1\nEDU010195N2\nEDU010196F\nEDU010196D\nEDU010196N1\nEDU010196N2\n\n\n\n\n0\nUNITED STATES\n0\n0\n40024299\n0\n0\n0\n39967624\n0\n0\n...\n0\n0\n0\n43993459\n0\n0\n0\n44715737\n0\n0\n\n\n1\nALABAMA\n1000\n0\n733735\n0\n0\n0\n728234\n0\n0\n...\n0\n0\n0\n727989\n0\n0\n0\n736825\n0\n0\n\n\n2\nAutauga, AL\n1001\n0\n6829\n0\n0\n0\n6900\n0\n0\n...\n0\n0\n0\n7568\n0\n0\n0\n7834\n0\n0\n\n\n3\nBaldwin, AL\n1003\n0\n16417\n0\n0\n0\n16465\n0\n0\n...\n0\n0\n0\n19961\n0\n0\n0\n20699\n0\n0\n\n\n4\nBarbour, AL\n1005\n0\n5071\n0\n0\n0\n5098\n0\n0\n...\n0\n0\n0\n5017\n0\n0\n0\n5053\n0\n0\n\n\n\n\n5 rows × 42 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\n\ned_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3198 entries, 0 to 3197\nData columns (total 42 columns):\n #   Column       Non-Null Count  Dtype \n---  ------       --------------  ----- \n 0   Area_name    3198 non-null   object\n 1   STCOU        3198 non-null   int64 \n 2   EDU010187F   3198 non-null   int64 \n 3   EDU010187D   3198 non-null   int64 \n 4   EDU010187N1  3198 non-null   int64 \n 5   EDU010187N2  3198 non-null   int64 \n 6   EDU010188F   3198 non-null   int64 \n 7   EDU010188D   3198 non-null   int64 \n 8   EDU010188N1  3198 non-null   int64 \n 9   EDU010188N2  3198 non-null   int64 \n 10  EDU010189F   3198 non-null   int64 \n 11  EDU010189D   3198 non-null   int64 \n 12  EDU010189N1  3198 non-null   int64 \n 13  EDU010189N2  3198 non-null   int64 \n 14  EDU010190F   3198 non-null   int64 \n 15  EDU010190D   3198 non-null   int64 \n 16  EDU010190N1  3198 non-null   int64 \n 17  EDU010190N2  3198 non-null   int64 \n 18  EDU010191F   3198 non-null   int64 \n 19  EDU010191D   3198 non-null   int64 \n 20  EDU010191N1  3198 non-null   int64 \n 21  EDU010191N2  3198 non-null   int64 \n 22  EDU010192F   3198 non-null   int64 \n 23  EDU010192D   3198 non-null   int64 \n 24  EDU010192N1  3198 non-null   int64 \n 25  EDU010192N2  3198 non-null   int64 \n 26  EDU010193F   3198 non-null   int64 \n 27  EDU010193D   3198 non-null   int64 \n 28  EDU010193N1  3198 non-null   int64 \n 29  EDU010193N2  3198 non-null   int64 \n 30  EDU010194F   3198 non-null   int64 \n 31  EDU010194D   3198 non-null   int64 \n 32  EDU010194N1  3198 non-null   int64 \n 33  EDU010194N2  3198 non-null   int64 \n 34  EDU010195F   3198 non-null   int64 \n 35  EDU010195D   3198 non-null   int64 \n 36  EDU010195N1  3198 non-null   int64 \n 37  EDU010195N2  3198 non-null   int64 \n 38  EDU010196F   3198 non-null   int64 \n 39  EDU010196D   3198 non-null   int64 \n 40  EDU010196N1  3198 non-null   int64 \n 41  EDU010196N2  3198 non-null   int64 \ndtypes: int64(41), object(1)\nmemory usage: 1.0+ MB\n\n\n\nYou can read all sheets with sheet_name = None\nThis gets read into a dictionary!\n\nKeys are the sheet name\nValues are the DataFrames from each sheet\n\n\n\ned_data = pd.read_excel(\"https://www4.stat.ncsu.edu/~online/datasets/censusEd.xlsx\",\n                        sheet_name = None)\ntype(ed_data)\n\n/usr/local/lib/python3.10/dist-packages/openpyxl/worksheet/header_footer.py:48: UserWarning: Cannot parse header or footer so it will be ignored\n  warn(\"\"\"Cannot parse header or footer so it will be ignored\"\"\")\n\n\ndict\n\n\n\ned_data.keys()\n\ndict_keys(['EDU01A', 'EDU01B', 'EDU01C', 'EDU01D', 'EDU01E', 'EDU01F', 'EDU01G', 'EDU01H', 'EDU01I', 'EDU01J'])\n\n\n\ned_data.get(\"EDU01A\").head()\n\n\n  \n    \n\n\n\n\n\n\nArea_name\nSTCOU\nEDU010187F\nEDU010187D\nEDU010187N1\nEDU010187N2\nEDU010188F\nEDU010188D\nEDU010188N1\nEDU010188N2\n...\nEDU010194N1\nEDU010194N2\nEDU010195F\nEDU010195D\nEDU010195N1\nEDU010195N2\nEDU010196F\nEDU010196D\nEDU010196N1\nEDU010196N2\n\n\n\n\n0\nUNITED STATES\n0\n0\n40024299\n0\n0\n0\n39967624\n0\n0\n...\n0\n0\n0\n43993459\n0\n0\n0\n44715737\n0\n0\n\n\n1\nALABAMA\n1000\n0\n733735\n0\n0\n0\n728234\n0\n0\n...\n0\n0\n0\n727989\n0\n0\n0\n736825\n0\n0\n\n\n2\nAutauga, AL\n1001\n0\n6829\n0\n0\n0\n6900\n0\n0\n...\n0\n0\n0\n7568\n0\n0\n0\n7834\n0\n0\n\n\n3\nBaldwin, AL\n1003\n0\n16417\n0\n0\n0\n16465\n0\n0\n...\n0\n0\n0\n19961\n0\n0\n0\n20699\n0\n0\n\n\n4\nBarbour, AL\n1005\n0\n5071\n0\n0\n0\n5098\n0\n0\n...\n0\n0\n0\n5017\n0\n0\n0\n5053\n0\n0\n\n\n\n\n5 rows × 42 columns",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas for Reading Raw Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-json-data",
    "href": "01_Programming_in_python/16-Pandas_For_Reading_Data.html#reading-json-data",
    "title": "Pandas for Reading Raw Data",
    "section": "Reading JSON Data",
    "text": "Reading JSON Data\n\nJSON data has a structure similar to a dictionary\n\nKey-value pairs\n\n\n{  \n  {  \n    \"name\": \"Barry Sanders\"  \n    \"games\" : 153  \n    \"position\": \"RB\"  \n  },  \n  {  \n    \"name\": \"Joe Montana\"  \n    \"games\": 192  \n    \"position\": \"QB\"  \n  }  \n}\n\nread_json() function from pandas will work!\nRead in data from URL: “https://api.exchangerate-api.com/v4/latest/USD”\n\n\nurl = \"https://api.exchangerate-api.com/v4/latest/USD\"\nusd_data = pd.read_json(url)\nusd_data.head()\n\n\n  \n    \n\n\n\n\n\n\nprovider\nWARNING_UPGRADE_TO_V6\nterms\nbase\ndate\ntime_last_updated\nrates\n\n\n\n\nAED\nhttps://www.exchangerate-api.com\nhttps://www.exchangerate-api.com/docs/free\nhttps://www.exchangerate-api.com/terms\nUSD\n2024-01-20\n1705708802\n3.67\n\n\nAFN\nhttps://www.exchangerate-api.com\nhttps://www.exchangerate-api.com/docs/free\nhttps://www.exchangerate-api.com/terms\nUSD\n2024-01-20\n1705708802\n72.88\n\n\nALL\nhttps://www.exchangerate-api.com\nhttps://www.exchangerate-api.com/docs/free\nhttps://www.exchangerate-api.com/terms\nUSD\n2024-01-20\n1705708802\n95.71\n\n\nAMD\nhttps://www.exchangerate-api.com\nhttps://www.exchangerate-api.com/docs/free\nhttps://www.exchangerate-api.com/terms\nUSD\n2024-01-20\n1705708802\n405.28\n\n\nANG\nhttps://www.exchangerate-api.com\nhttps://www.exchangerate-api.com/docs/free\nhttps://www.exchangerate-api.com/terms\nUSD\n2024-01-20\n1705708802\n1.79",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Pandas for Reading Raw Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/18-More_Function_Writing.html#programming-in-python",
    "href": "01_Programming_in_python/18-More_Function_Writing.html#programming-in-python",
    "title": "More on Writing Functions",
    "section": "Programming in Python",
    "text": "Programming in Python\nWe’ve gone through a lot with python already!\n\nJupyterLab & Markdown\nBasic data types\n\nStrings, Floats, Ints, Booleans\n\nCompound data types\n\nLists, Tuples, Dictionaries, Numpy arrays, pandas series & data frames\n\nWriting Functions\nControl flow (if/then/else, Looping)\nData uses and basic summarizations\n\nNext up we’ll cover a bit more about writing our own functions that will greatly increase their usefulness! Then we’ll talk about how to plot our data using matplotlib and pandas.\nThen we’ll really be ready to start talking about modeling, data sources, and generally moving towards doing fun things with big data!",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "More on Writing Functions"
    ]
  },
  {
    "objectID": "01_Programming_in_python/18-More_Function_Writing.html#writing-functions-recap",
    "href": "01_Programming_in_python/18-More_Function_Writing.html#writing-functions-recap",
    "title": "More on Writing Functions",
    "section": "Writing Functions Recap",
    "text": "Writing Functions Recap\n\nWriting functions is super cool!\nRecall the basic syntax\n\n\ndef func_name(args):\n    \"\"\"\n    Doc string\n    \"\"\"\n    body\n    return object\n\n\nWe saw that there were many ways to set up your function arguments and to call your function\nRemember that variables defined within the function are not generally available outside of the function\n\nThat is, a new symbol table is used when the function is called\nWe can define global variables if we really want to\n\nWe return what we want from the function with return\n\nIf we don’t return anything then None is returned!\n\n\nThe topics we’ll cover in this notebook are: - Packing and unpacking with functions + Catching extra arguments given to a function + Passing your arguments to a function from an object - lambda functions - map(), filter(), and functools.reduce()\nIn a later notebook we’ll talk about how to handle errors or exceptions!",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "More on Writing Functions"
    ]
  },
  {
    "objectID": "01_Programming_in_python/18-More_Function_Writing.html#packing-and-unpacking",
    "href": "01_Programming_in_python/18-More_Function_Writing.html#packing-and-unpacking",
    "title": "More on Writing Functions",
    "section": "Packing and Unpacking",
    "text": "Packing and Unpacking\nReminder: We can pack a list by separating variables to create with commas:\nfirst, second, third = ...\nLet’s look at an example:\n\nanimals = [\"Dog\", \"Cat\", \"Horse\", \"Frog\", \"Cow\", \"Buffalo\", \"Deer\", \"Fish\", \"Bird\", \"Fox\", \"Racoon\"]\nshort_animals = animals[:3]\n\nfirst, second, third = short_animals\nprint(first + \" \" + second + \" \" + third)\n\nDog Cat Horse\n\n\nWe saw that we can pack leftover elements into a list using *variable:\n\nfirst, second, third, *other = animals\nprint(first + \" \" + second + \" \" + third)\nprint(other)\n\nDog Cat Horse\n['Frog', 'Cow', 'Buffalo', 'Deer', 'Fish', 'Bird', 'Fox', 'Racoon']\n\n\n\n\nUnlimited Positional Arguments\n\nThis idea can be used when writing a function!\nIn this case we define an argument to our function with *variable\nThis allows us to pass unlimited positional arguments to our function (variadic arguments)\nThe inputs are handled as a tuple in the function!\n\nLet’s write a silly function to print out all arguments passed via this idea\n\ndef basic_print(*args):\n  print(type(args))\n  print(args)\n  return None\n\nWe can pass this function as many things as we’d like and it will be accessible within the function body as a tuple. We can see this as the printed values are surrounded by (...), which implies we are printing a tuple!\n\nbasic_print(\"hi\", [\"a list\", \"how fun\"], 3, 10)\n\n&lt;class 'tuple'&gt;\n('hi', ['a list', 'how fun'], 3, 10)\n\n\nAs tuples are iterable, we can iterate across these elements via a loop!\n\ndef basic_print_elements(*args):\n  for i in args:\n    print(type(i),i)\n  return None\n\n\nbasic_print_elements(\"hi\", [\"a list\", \"how fun\"], 3, 10)\n\n&lt;class 'str'&gt; hi\n&lt;class 'list'&gt; ['a list', 'how fun']\n&lt;class 'int'&gt; 3\n&lt;class 'int'&gt; 10\n\n\nLet’s define a function that takes in as many 1D numpy arrays or pandas series the user would like and returns the means for each input.\nWe’ll also take an argument for the number of decimal places to return for the means.\n\ndef find_means(*args, decimals = 4):\n    \"\"\"\n    Assume that args will be a bunch of numpy arrays (1D) or pandas series\n    Return the mean of each, rounded to `decimals` places\n    \"\"\"\n    means = []\n    for x in args: #iterate over the tuple values\n        means.append(np.mean(x).round(decimals))\n    return means\n\n\nCreate some data with numpy to send to this\n\n\nimport numpy as np\nfrom numpy.random import default_rng\nrng = default_rng(3) #set seed to 3\n\n#generate a few means from standard normal data\nn5 = rng.standard_normal(5)       #sample size of 5\nn25 = rng.standard_normal(25)     #sample size of 25\nn100 = rng.standard_normal(100)   #sample size of 100\nn1000 = rng.standard_normal(1000) #sample size of 1000\n\nLet’s pass these to our function!\n\nfind_means(n5, n25, n100, n1000, decimals = 2)\n\n[-0.22, 0.11, -0.01, 0.04]\n\n\nAwesome! This gives us a lot more functionality with our function writing.\n\n\n\nUnlimited Keyword Arguments\n\nYou can also pass unlimited keyword arguments if you define the arg with a **\nHandled as a dictionary in the function\n\nLet’s write a basic function to print out the keywords with their values.\n\ndef print_key_value_pairs(**kwargs):\n    \"\"\"\n    key word args can be anything\n    \"\"\"\n    print(type(kwargs), kwargs)\n    for x in kwargs:\n        print(x + \" : \" + str(kwargs.get(x))) #cast the value to a string for printing\n\nNow we pass as many named arguments as we’d like!\n\nprint_key_value_pairs(\n  name = \"Justin\",\n  job = \"Professor\",\n  phone = 9195150637)\n\n&lt;class 'dict'&gt; {'name': 'Justin', 'job': 'Professor', 'phone': 9195150637}\nname : Justin\njob : Professor\nphone : 9195150637",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "More on Writing Functions"
    ]
  },
  {
    "objectID": "01_Programming_in_python/18-More_Function_Writing.html#unpacking-arguments",
    "href": "01_Programming_in_python/18-More_Function_Writing.html#unpacking-arguments",
    "title": "More on Writing Functions",
    "section": "Unpacking Arguments",
    "text": "Unpacking Arguments\n\nSuppose we want to call our function but our arguments are stored in a list or tuple\n\nWe’ll do this a bit when we do our machine learning models!\n\nWe can unpack this list or tuple to be our function arguments by calling our function in a particular way.\n\n\n#We want to call our find_means function with these arguments\ncall_args = [n5, n25, n100, n1000]\n\n\nCall the function using *call_args (unpacking)\n\n\nfind_means(*call_args, decimals = 3)\n\n[-0.223, 0.114, -0.014, 0.04]\n\n\nNice! Now we can more easily call our function too!\n\nWe can do the same thing with our keyword arguments.\nSuppose our keyword arguments are stored in a dictionary\nCan call the function using **kw_call_args (unpacking)\n\nDefine a quick function.\n\ndef print_items(name, job, number):\n  print(\"Name is: \", name)\n  print(\"Job is: \", job)\n  print(\"Phone number is: \", number)\n  return\n\nCreate a dictionary with key-value pairs corresponding to our inputs.\n\nkw_call_args = {\"name\": \"Justin Post\", \"job\": \"Professor\", \"number\": \"9195150637\"}\nkw_call_args\n\n{'name': 'Justin Post', 'job': 'Professor', 'number': '9195150637'}\n\n\nCall our function using ** with our dictionary!\n\nprint_items(**kw_call_args)\n\nName is:  Justin Post\nJob is:  Professor\nPhone number is:  9195150637\n\n\n\nPassing named and unnamed arguments can both be done at once!\nRecall our find_means function inputs: def find_means(*args, decimals = 4):\n\n\ndec_dictionary = {\"decimals\": 6}\nfind_means(*call_args, **dec_dictionary)\n\n[-0.223413, 0.114454, -0.014443, 0.039762]",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "More on Writing Functions"
    ]
  },
  {
    "objectID": "01_Programming_in_python/18-More_Function_Writing.html#lambda-functions",
    "href": "01_Programming_in_python/18-More_Function_Writing.html#lambda-functions",
    "title": "More on Writing Functions",
    "section": "Lambda Functions",
    "text": "Lambda Functions\nWe often want to create a quick function for a single purpose that we don’t want to reuse for later.\nRather than define a function and storing it as an object the way we’ve been doing it, we can create a lambda function (also sometimes called an in-line function or an anonymous function)\n\nUse keyword lambda\nDefine arguments followed by a :\nGive the action for the function to perform\n\nSyntax requires a single line. Cannot use return or some other keywords\n\n\n\nsquare_it = lambda x : x**2\nsquare_it(10)\n\n100\n\n\n\nsquare_then_add = lambda x, y : x**2 + y\nsquare_then_add(10, 5)\n\n105\n\n\n\nCan still define the arguments in many ways\n\n\nmy_print = lambda x, y = \"ho\": print(x, y)\nmy_print(\"hi\")\n\nhi ho\n\n\n\nmy_print = lambda *x: [print(\"Input: \" + str(z)) for z in x]\nmy_print(\"hi\", \"ho\")\n\nInput: hi\nInput: ho\n\n\n[None, None]\n\n\nNow, saving the function function in an object is really kind of counter to the point of an anonymous (lambda) function. We don’t usually save these for later use! We’ll see many uses for lambda functions. Let’s cover one of those here.\n\nmap()\nUsing lambda functions comes up a lot in the map/reduce idea. This is important for what we’ll do!\nMap/reduce idea: - Apply (or map) a function to each element of an iterable object - Combine (or reduce) the results where able\nExample: Counting words - Want to take a list of words and create a tuple with the word and the value 1 - Syntax for map: + map(function, object_to_apply_function_to)\n\nres = map(\n    lambda word: (word, 1),\n    [\"these\", \"are\", \"my\", \"words\", \"these\", \"words\", \"rule\"]\n    )\n\nSimilar to other functions like range or zip, we don’t get back the actual object we think we would. Instead we get a map object that can be used to find the mapped values.\n\nprint(type(res))\nres\n\n&lt;class 'map'&gt;\n\n\n&lt;map at 0x785ed8b403d0&gt;\n\n\nWe can convert the map object to a list using list()\n\nlist(res)\n\n[('these', 1),\n ('are', 1),\n ('my', 1),\n ('words', 1),\n ('these', 1),\n ('words', 1),\n ('rule', 1)]\n\n\nLet’s return the square of some values without defining a square function via map()\n\nmap(lambda r: r **2, range(0,5))\n\n&lt;map at 0x785ed8b40cd0&gt;\n\n\n\nlist(map(lambda r: r **2, range(0,5)))\n\n[0, 1, 4, 9, 16]\n\n\nNote: this can equivalently be done using a list comprehension!\n\n[r ** 2 for r in range(0,5)]\n\n[0, 1, 4, 9, 16]\n\n\nAnother example of using map with a lambda function might be to quickly uppercase a list of strings.\n\nlist(map(lambda x: x.upper(), ['cat', 'dog', 'wolf', 'bear', 'parrot']))\n\n['CAT', 'DOG', 'WOLF', 'BEAR', 'PARROT']\n\n\nAgain, this could be done with a list comprehension!\n\n[x.upper() for x in ['cat', 'dog', 'wolf', 'bear', 'parrot']] #equivalent\n\n['CAT', 'DOG', 'WOLF', 'BEAR', 'PARROT']\n\n\nOne interesting use of a lambda function is through the creation of a function generator\n\nCreate a function that generates functions!\nHere a function to raise a number to a given power\n\n\ndef raise_power(k):\n    return lambda r: r ** k\n\n\nsquare = raise_power(2) #creates a function!\nsquare(10)\n\n100\n\n\n\ncube = raise_power(3)\ncube(5)\n\n125\n\n\nWe can put this together with our packing idea and map!\n\nident, square, cube = map(raise_power, range(1,4))\nident(4)\n\n4\n\n\n\nsquare(4)\n\n16\n\n\n\ncube(4)\n\n64\n\n\n\n\n\nfilter()\n\nLambda functions can be used with filter()\n\nfilter() takes a predicate (statement to return what you want) as the first arg and an iterable as the second\nWe can give the first argument as a lambda function\n\n\nHere we want to return only vowels from a string (an iterable).\n\nfilter(lambda x: x in \"aeiou\", \"We want to return just the vowels.\")\n\n&lt;filter at 0x785ed8b41150&gt;\n\n\n\n#return in list form!\nlist(filter(lambda x: x in \"aeiou\", \"We want to return just the vowels.\"))\n\n['e', 'a', 'o', 'e', 'u', 'u', 'e', 'o', 'e']\n\n\nEquivalent to doing a list comprehension with an if in there!\n\n[x for x in \"We want to return just the vowels.\" if x in \"aeiou\"] #equivalent\n\n['e', 'a', 'o', 'e', 'u', 'u', 'e', 'o', 'e']\n\n\nThis time let’s use filter to only return even numbers from an iterable object.\n\nRecall the mod operator %, which returns the remainder\nA number is even if, when we divide by 2, we get 0 as the remainder\n\n\nlist(filter(lambda x: (x % 2) != 0, range(0, 10)))\n\n[1, 3, 5, 7, 9]\n\n\nEquivalent to this list comprehension with an if:\n\n[x for x in range(0, 10) if (x % 2) != 0]\n\n[1, 3, 5, 7, 9]\n\n\n\n\n\nfunctools.reduce()\nLambda functions can be used with functools.reduce()\n\nreduce() takes in a function of two variables and an iterable\nIt applies the function repetitively over the iterable, and returns the result\n\nHere, we’ll find the cumulative sum of a bunch of numbers (given as an iterable)\n\nfrom functools import reduce\nreduce(lambda x, y: x + y, range(1,11)) # sum first 10 numbers\n\n55\n\n\nHere, reduce() works like this: - Takes the first two arguments of the iterable (1 and 2) and adds them - Takes the result of that (3) and adds it to the next argument of the iterable (3) - Repeats until the iterable is exhausted\nAgain, we could do this kind of thing with a list comprehension. Here we just use the sum function on the result.\n\nsum([x for x in range(1,11)])\n\n55\n\n\nWe can also provide an initial value to reduce() to start the computation at. Here we supply 45.\n\n#add an initial value to the computation\nreduce(lambda x, y: x + y, range(1,11), 45) # sum first 10 numbers + 45\n\n100\n\n\nOk, that’s a bit silly. We can do more interesting things with this. For instance, here we write a reduce function to find the largest value in a list.\n\n#create a list of numbers to find the max of\nmy_list = [53, 13, 103, 2, 15, -10, 201, 6]\nreduce(lambda x, y: x if x &gt; y else y, my_list)\n\n201\n\n\nHow does that work? - Take x (53) and y (13), if x &gt; y take x (53), otherwise take y (13) - With the result of that as x, take y as the next value in the iterable (103) - Repeat that step. Here it would keep 103 since it is larger - Keep going until the iterable is exhausted\nThis works with a starting value as well!\n\nreduce(lambda x, y: x if x &gt; y else y, my_list, 500)\n\n500",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "More on Writing Functions"
    ]
  },
  {
    "objectID": "01_Programming_in_python/18-More_Function_Writing.html#quick-video",
    "href": "01_Programming_in_python/18-More_Function_Writing.html#quick-video",
    "title": "More on Writing Functions",
    "section": "Quick Video",
    "text": "Quick Video\nThis video shows an example of writing more involved functions including the use of lambda and map (Coming soon)\n\nfrom IPython.display import IFrame\nIFrame(src=\"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=55af749d-fd9d-4b0d-b2b4-b10301614c9c&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "More on Writing Functions"
    ]
  },
  {
    "objectID": "01_Programming_in_python/20-Plotting_pandas.html#barplots-with-pandas",
    "href": "01_Programming_in_python/20-Plotting_pandas.html#barplots-with-pandas",
    "title": "Plotting with pandas",
    "section": "Barplots with pandas",
    "text": "Barplots with pandas\nWe saw the barplot for summarizing categorical data. We’ll cover two different methods to create bar plots in pandas:\n\n.plot.bar() method on a series or dataframe\n.plot() method with kind = 'bar' specified\n\n\ntable = sub_titanic_data.embarkedC.value_counts()\nprint(type(table))\ntable\n\n&lt;class 'pandas.core.series.Series'&gt;\n\n\nSouthampton    914\nCherbourg      270\nQueenstown     123\nName: embarkedC, dtype: int64\n\n\nNote that this is a pandas series. We can use the .plot.bar() method on this series to get a bar plot.\n\ntable.plot.bar()\n\n\n\n\n\n\n\n\nWe can then apply the matplotlib functionality to update/modify the plot (notice we already read in matplotlib.pyplot as plt.\n\ntable.plot.bar()\nplt.xticks(rotation = 0)\n\n(array([0, 1, 2]),\n [Text(0, 0, 'Southampton'),\n  Text(1, 0, 'Cherbourg'),\n  Text(2, 0, 'Queenstown')])\n\n\n\n\n\n\n\n\n\nAlternatively, we can use the slightly more flexible .plot() method on a series where we specify the kind= of the plot to create.\n\ntable.plot(kind = \"bar\", rot = 0) #can use additional arg rather than additional function call\n\n\n\n\n\n\n\n\n\nWhere we really gain is when trying to bring in a multivariate relationship\n\nFor instance, we can color the bars by another categorical variable in the dataframe pretty easily!\n\nFirst, create the contingency table for two variables (remember this returns a DataFrame)\n\ntable = pd.crosstab(sub_titanic_data[\"embarkedC\"], sub_titanic_data[\"survivedC\"])\nprint(type(table))\ntable\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\n\n\n\n  \n    \n\n\n\n\n\nsurvivedC\nDied\nSurvived\n\n\nembarkedC\n\n\n\n\n\n\nCherbourg\n120\n150\n\n\nQueenstown\n79\n44\n\n\nSouthampton\n610\n304\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n    \n  \n\n\nNow let’s use the .plot.bar() method on this data frame.\n\ntable.plot.bar(stacked = True, rot = 0)\n\n\n\n\n\n\n\n\nWe can do this with the .plot() method as well.\n\ntable.plot(stacked = True, kind = \"bar\", rot = 0)\n\n\n\n\n\n\n\n\nIf we want side-by-side bar plots, we can just remove the stacked = True argument.\n\ntable.plot.bar(rot = 0)",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Plotting with `pandas`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/20-Plotting_pandas.html#plotting-numeric-variables",
    "href": "01_Programming_in_python/20-Plotting_pandas.html#plotting-numeric-variables",
    "title": "Plotting with pandas",
    "section": "Plotting Numeric Variables",
    "text": "Plotting Numeric Variables\nRecall: Numeric variable have entries that are a numerical value where math can be performed\nGoal: describe the shape, center, and spread of the distribution\n\nShape can be described well via a histogram or density plot\nBoxplots provide a good summary of the distribution as well\n\n\n\nHistogram with pandas\nHistogram - Bin data to show distribution of observations - Done via .plot.hist() or .plot(kind = \"hist\") method on a series or data frame - A .hist() method also exists!\nFirst, the .plot.hist() method on a series (we’ll also fix it up a bit using matplotlib.pyplot functionality.\n\nsub_titanic_data[\"age\"].plot.hist()\nplt.xlabel(\"Age\")\nplt.title(\"Histogram of Age for Titanic Passengers\")\n\nText(0.5, 1.0, 'Histogram of Age for Titanic Passengers')\n\n\n\n\n\n\n\n\n\n\nSpecify # of bins with bins =\nNote we also return the series in a different way here (just to show you can use either)\n\n\n#can add label/title here (xlabel doesn't seem to work as intended...)\n#instead we'll use the .set() method on the histogram to set the xlabel\nsub_titanic_data.age.plot.hist(bins = 20, title = \"Histogram of Age for Titanic Passengers\") \\\n    .set(xlabel = \"Age\")\n\n\n\n\n\n\n\n\n\nOverlaying Two Histograms\n\nTo overlay two histograms on the same graph, create two histograms and use alpha = 0-1 value. This sets the transparency.\n\nalpha = 1 is not transparent at all\nalpha = 0 is completely transparent\n\n\nLet’s create histograms of age for those that Survived and those that Died. - We should also set up the bins manually so they are the same bin widths and locations (for better comparison) - bins can be specified via the bins = argument\n\nbin_ends = 10\nbins = [i*max(sub_titanic_data.age)/bin_ends for i in range(0, bin_ends + 1)]\nprint(bins)\n\n[0.0, 8.0, 16.0, 24.0, 32.0, 40.0, 48.0, 56.0, 64.0, 72.0, 80.0]\n\n\n\nObtain subsets of data needed\n\n\nage_died = sub_titanic_data.loc[sub_titanic_data.survivedC == \"Died\", \"age\"] #series for died\nage_survived = sub_titanic_data.loc[sub_titanic_data.survivedC == \"Survived\", \"age\"] #series for survived\n\nCreate the plot using the .plot.hist() method. By creating two plots in the same cell, they will be overlayed. - Notice the use of label() to automatically create a legend (similar to what we did with matplotlib\n\nage_died.plot.hist(bins = bins, alpha = 0.5, label = \"Died\",\n                   title = \"Ages for those that survived vs those that died\") \\\n                   .set(xlabel = \"Age\")\nage_survived.plot.hist(bins = bins, alpha = 0.5, label = \"Survived\")\nplt.legend()\n\n\n\n\n\n\n\n\n\npandas will automatically overlay data from different columns of the same data frame\nThat is, if we use the plot.hist() method on a data frame with two numeric variables, it will plot both of those on the same plot\n\nTo use that here we need to make that kind of data frame…\nNeed two columns, one representing ages for those that survived and one for those that died\n\n\n\nage_died = sub_titanic_data.loc[sub_titanic_data.survivedC == \"Died\", \"age\"] #809 values\nage_survived = sub_titanic_data.loc[sub_titanic_data.survivedC == \"Survived\", \"age\"] #500 values\n\n\nNote the difference in the number of observations! This means that putting them together into a data frame isn’t super seamless.\n\n\ntemp = pd.DataFrame(zip(age_died, age_survived), columns = [\"Died\", \"Survived\"])\nprint(temp.shape)\n#only has 500 rows instead of 809!\ntemp.plot.hist(alpha = 0.5)\n\n(500, 2)\n\n\n\n\n\n\n\n\n\n\nHow do we fix that?\n\nWe can fill in NaN values for the shorter series so they end up the same length.\n\n\n\nage_survived = age_survived.append(pd.Series([np.nan for _ in range(308)]))\nage_survived\n\nFutureWarning: The series.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  age_survived = age_survived.append(pd.Series([np.nan for _ in range(308)]))\n\n\n0      29.0000\n1       0.9167\n5      48.0000\n6      63.0000\n8      53.0000\n        ...   \n303        NaN\n304        NaN\n305        NaN\n306        NaN\n307        NaN\nLength: 808, dtype: float64\n\n\n\nNow we can zip these together into a data frame and plot as we’d like!\n\n\nplotting_df = pd.DataFrame(zip(age_died, age_survived),\n                      columns = [\"Died\", \"Survived\"])\nprint(plotting_df.shape)\nplotting_df.plot.hist(alpha = 0.5, title = \"Ages for those that survived vs those that died\") \\\n    .set(xlabel = \"Age\")\n\n(808, 2)\n\n\n\n\n\n\n\n\n\n\n\nSide-by-side Histograms\n\nCan place two graphs next to each other with .hist() method (notice this is a different method!)\n\nSpecify a column variable and a by variable\n\nThese don’t have the same bin widths\n\n\nsub_titanic_data.hist(column = \"age\", by = \"survivedC\")\n\narray([&lt;Axes: title={'center': 'Died'}&gt;,\n       &lt;Axes: title={'center': 'Survived'}&gt;], dtype=object)\n\n\n\n\n\n\n\n\n\n\nWe could also use the .groupby() functionality but the result is a bit subpar as it doesn’t label the graphs.\n\n\nsub_titanic_data[[\"age\", \"survivedC\"]].groupby(\"survivedC\").hist()\n\nsurvivedC\nDied        [[Axes(0.125,0.11;0.775x0.77)]]\nSurvived    [[Axes(0.125,0.11;0.775x0.77)]]\ndtype: object\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKernel smoother with pandas\n\nKernel Smoother - Smoothed version of a histogram\n\n‘Kernel’ determines weight given to nearby points\n\nUse .plot.density() or plot(kind = \"density\") method\nbw_method = # specifies how ‘smooth’ you want the graph to be\n\nsmaller values imply using a smaller bandwidth (more variability)\nlarger values imply using a larger bandwidth (more smooth)\n\n\n\n\nsub_titanic_data.age.plot.density(bw_method = 0.1, label = \"bw = 0.1\",\n                                  title = \"Density Plots of Age for Titanic Passengers\")\nsub_titanic_data.age.plot.density(bw_method = 0.25, label = \"bw = 0.25\")\nsub_titanic_data.age.plot.density(bw_method = 0.5, label = \"bw = 0.5\")\nplt.legend()\n\n\n\n\n\n\n\n\n\n\n\nBoxplots with pandas\n\nBoxplot - Provides the five number summary in a graph\n\nMin, Q1, Median, Q3, Max\n\nOften show possible outliers as well\n\nUse .plot.box() or plot(kind = \"box\") method\nA .boxplot() method also exists!\n\n\nFirst the .plot.box() method on a series\n\nsub_titanic_data.age.plot.box()\n\n\n\n\n\n\n\n\n\nFine.. but usually we want to compare these boxplots across another variable. To do this the .boxplot() method on a data frame is very useful!\nSimilar to the .hist() method we specify a column and by variable\n\n\nsub_titanic_data.boxplot(column = [\"age\"], by = \"survivedC\")\n\n\n\n\n\n\n\n\n\n\n\nScatter Plots with pandas\n\nScatter Plot - graphs points corresponding to each observation\n\nUse .plot.scatter() or plot(kind = \"scatter\") method on a data frame with x =, and y =\n\n\n\nsub_titanic_data.plot.scatter(x = \"age\", y = \"fare\", title = \"Scatter plots rule!\")\n\n\n\n\n\n\n\n\n\nEasy to modify! Check the help for arguments (specifically the keyword arguments that get passed to .plot()) but we can specify different marker values, a title, and more!\n\n\n#c = color, marker is a matplotlib option\nsub_titanic_data.plot.scatter(x = \"age\", y = \"fare\", c = \"Red\", marker = \"v\", title = \"Oh, V's!\")\n\n\n\n\n\n\n\n\n\nWe can easily modify aspects of the plot based on a variable as well!\nThis is great as it allows us to bring a third varaible in\nHere we color by a category variable\n\n\n#s for size (should be a numeric column), cmap can be used with c for specifying color scales\nsub_titanic_data.plot.scatter(x = \"age\", y = \"fare\", c = \"survivedC\", cmap = \"viridis\", s = 10)\n\n\n\n\n\n\n\n\n\n\nMatrix of Scatter Plots\n\n.plotting.scatter_matrix() function will produce basic graphs showing relationships!\nHere we grab the numeric variables from the data frame\n\n\npd.plotting.scatter_matrix(sub_titanic_data[[\"age\", \"fare\", \"survived\", \"sibsp\"]])\n\narray([[&lt;Axes: xlabel='age', ylabel='age'&gt;,\n        &lt;Axes: xlabel='fare', ylabel='age'&gt;,\n        &lt;Axes: xlabel='survived', ylabel='age'&gt;,\n        &lt;Axes: xlabel='sibsp', ylabel='age'&gt;],\n       [&lt;Axes: xlabel='age', ylabel='fare'&gt;,\n        &lt;Axes: xlabel='fare', ylabel='fare'&gt;,\n        &lt;Axes: xlabel='survived', ylabel='fare'&gt;,\n        &lt;Axes: xlabel='sibsp', ylabel='fare'&gt;],\n       [&lt;Axes: xlabel='age', ylabel='survived'&gt;,\n        &lt;Axes: xlabel='fare', ylabel='survived'&gt;,\n        &lt;Axes: xlabel='survived', ylabel='survived'&gt;,\n        &lt;Axes: xlabel='sibsp', ylabel='survived'&gt;],\n       [&lt;Axes: xlabel='age', ylabel='sibsp'&gt;,\n        &lt;Axes: xlabel='fare', ylabel='sibsp'&gt;,\n        &lt;Axes: xlabel='survived', ylabel='sibsp'&gt;,\n        &lt;Axes: xlabel='sibsp', ylabel='sibsp'&gt;]], dtype=object)",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Plotting with `pandas`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/20-Plotting_pandas.html#quick-video",
    "href": "01_Programming_in_python/20-Plotting_pandas.html#quick-video",
    "title": "Plotting with pandas",
    "section": "Quick Video",
    "text": "Quick Video\nThis video shows an example of using pandas for plotting (Coming soon!)\n\nfrom IPython.display import IFrame\nIFrame(src=\"https://ncsu.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=f4e2bc16-1757-4f1e-8df9-b103016c97d2&autoplay=false&offerviewer=true&showtitle=true&showbrand=true&captions=false&interactivity=all\", height=\"405\", width=\"720\")",
    "crumbs": [
      "Home",
      "Dealing with Data in `python`",
      "Plotting with `pandas`"
    ]
  },
  {
    "objectID": "01_Programming_in_python/22-Big_Recap_Landing.html",
    "href": "01_Programming_in_python/22-Big_Recap_Landing.html",
    "title": "Common Uses for Data",
    "section": "",
    "text": "The video below discusses the common ways we use data. We discuss the general idea of statistical learning and using data for descriptive purposes, for predictive purposes, in order to make statistical inferences, and to find patterns in data.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/22-Big_Recap_Landing.html#notes",
    "href": "01_Programming_in_python/22-Big_Recap_Landing.html#notes",
    "title": "Common Uses for Data",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/24-Prediction_Testing_Training_Landing.html",
    "href": "01_Programming_in_python/24-Prediction_Testing_Training_Landing.html",
    "title": "Common Uses for Data",
    "section": "",
    "text": "The video below discusses the common ways we use data. We discuss the general idea of statistical learning and using data for descriptive purposes, for predictive purposes, in order to make statistical inferences, and to find patterns in data.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/24-Prediction_Testing_Training_Landing.html#notes",
    "href": "01_Programming_in_python/24-Prediction_Testing_Training_Landing.html#notes",
    "title": "Common Uses for Data",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/26-Multiple_Linear_Regression_Landing.html",
    "href": "01_Programming_in_python/26-Multiple_Linear_Regression_Landing.html",
    "title": "Common Uses for Data",
    "section": "",
    "text": "The video below discusses the common ways we use data. We discuss the general idea of statistical learning and using data for descriptive purposes, for predictive purposes, in order to make statistical inferences, and to find patterns in data.\nI highly recommend watching the video using the ‘full’ Panopto player. There is a ‘pop out’ button in the bottom right of the video to enter this viewer.",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  },
  {
    "objectID": "01_Programming_in_python/26-Multiple_Linear_Regression_Landing.html#notes",
    "href": "01_Programming_in_python/26-Multiple_Linear_Regression_Landing.html#notes",
    "title": "Common Uses for Data",
    "section": "Notes",
    "text": "Notes\n\nHTML version\nPDF version\n\nUse the table of contents on the left or the arrows at the bottom of this page to navigate to the next learning material!",
    "crumbs": [
      "Home",
      "Basics of Predictive Modeling",
      "Common Uses for Data"
    ]
  }
]